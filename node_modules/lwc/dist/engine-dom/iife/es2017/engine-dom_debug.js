var LWC = (function (exports) {
  'use strict';

  /* proxy-compat-disable */

  /**
   * Copyright (C) 2018 salesforce.com, inc.
   */

  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  function invariant(value, msg) {
    if (!value) {
      throw new Error(`Invariant Violation: ${msg}`);
    }
  }

  function isTrue$1(value, msg) {
    if (!value) {
      throw new Error(`Assert Violation: ${msg}`);
    }
  }

  function isFalse$1(value, msg) {
    if (value) {
      throw new Error(`Assert Violation: ${msg}`);
    }
  }

  function fail(msg) {
    throw new Error(msg);
  }

  var assert = /*#__PURE__*/Object.freeze({
    __proto__: null,
    invariant: invariant,
    isTrue: isTrue$1,
    isFalse: isFalse$1,
    fail: fail
  });
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  const {
    assign,
    create,
    defineProperties,
    defineProperty,
    freeze,
    getOwnPropertyDescriptor: getOwnPropertyDescriptor$1,
    getOwnPropertyNames: getOwnPropertyNames$1,
    getPrototypeOf: getPrototypeOf$1,
    hasOwnProperty: hasOwnProperty$1,
    isFrozen,
    keys,
    seal,
    setPrototypeOf
  } = Object;
  const {
    isArray: isArray$1
  } = Array;
  const {
    filter: ArrayFilter,
    find: ArrayFind,
    indexOf: ArrayIndexOf,
    join: ArrayJoin,
    map: ArrayMap$1,
    push: ArrayPush$1,
    reduce: ArrayReduce,
    reverse: ArrayReverse,
    slice: ArraySlice,
    splice: ArraySplice,
    unshift: ArrayUnshift,
    forEach
  } = Array.prototype;
  const {
    fromCharCode: StringFromCharCode
  } = String;
  const {
    charCodeAt: StringCharCodeAt,
    replace: StringReplace,
    slice: StringSlice,
    toLowerCase: StringToLowerCase
  } = String.prototype;

  function isUndefined$1(obj) {
    return obj === undefined;
  }

  function isNull(obj) {
    return obj === null;
  }

  function isTrue(obj) {
    return obj === true;
  }

  function isFalse(obj) {
    return obj === false;
  }

  function isBoolean(obj) {
    return typeof obj === 'boolean';
  }

  function isFunction$1(obj) {
    return typeof obj === 'function';
  }

  function isObject(obj) {
    return typeof obj === 'object';
  }

  function isString(obj) {
    return typeof obj === 'string';
  }

  function noop() {
    /* Do nothing */
  }

  const OtS$1 = {}.toString;

  function toString$1(obj) {
    if (obj && obj.toString) {
      // Arrays might hold objects with "null" prototype So using
      // Array.prototype.toString directly will cause an error Iterate through
      // all the items and handle individually.
      if (isArray$1(obj)) {
        return ArrayJoin.call(ArrayMap$1.call(obj, toString$1), ',');
      }

      return obj.toString();
    } else if (typeof obj === 'object') {
      return OtS$1.call(obj);
    } else {
      return obj + '';
    }
  }

  function getPropertyDescriptor(o, p) {
    do {
      const d = getOwnPropertyDescriptor$1(o, p);

      if (!isUndefined$1(d)) {
        return d;
      }

      o = getPrototypeOf$1(o);
    } while (o !== null);
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
   * According to the following list, there are 48 aria attributes of which two (ariaDropEffect and
   * ariaGrabbed) are deprecated:
   * https://www.w3.org/TR/wai-aria-1.1/#x6-6-definitions-of-states-and-properties-all-aria-attributes
   *
   * The above list of 46 aria attributes is consistent with the following resources:
   * https://github.com/w3c/aria/pull/708/files#diff-eacf331f0ffc35d4b482f1d15a887d3bR11060
   * https://wicg.github.io/aom/spec/aria-reflection.html
   */


  const AriaPropertyNames = ['ariaActiveDescendant', 'ariaAtomic', 'ariaAutoComplete', 'ariaBusy', 'ariaChecked', 'ariaColCount', 'ariaColIndex', 'ariaColSpan', 'ariaControls', 'ariaCurrent', 'ariaDescribedBy', 'ariaDetails', 'ariaDisabled', 'ariaErrorMessage', 'ariaExpanded', 'ariaFlowTo', 'ariaHasPopup', 'ariaHidden', 'ariaInvalid', 'ariaKeyShortcuts', 'ariaLabel', 'ariaLabelledBy', 'ariaLevel', 'ariaLive', 'ariaModal', 'ariaMultiLine', 'ariaMultiSelectable', 'ariaOrientation', 'ariaOwns', 'ariaPlaceholder', 'ariaPosInSet', 'ariaPressed', 'ariaReadOnly', 'ariaRelevant', 'ariaRequired', 'ariaRoleDescription', 'ariaRowCount', 'ariaRowIndex', 'ariaRowSpan', 'ariaSelected', 'ariaSetSize', 'ariaSort', 'ariaValueMax', 'ariaValueMin', 'ariaValueNow', 'ariaValueText', 'role'];

  const {
    AriaAttrNameToPropNameMap,
    AriaPropNameToAttrNameMap
  } = /*@__PURE__*/(() => {
    const AriaAttrNameToPropNameMap = create(null);
    const AriaPropNameToAttrNameMap = create(null); // Synthetic creation of all AOM property descriptors for Custom Elements

    forEach.call(AriaPropertyNames, propName => {
      const attrName = StringToLowerCase.call(StringReplace.call(propName, /^aria/, () => 'aria-'));
      AriaAttrNameToPropNameMap[attrName] = propName;
      AriaPropNameToAttrNameMap[propName] = attrName;
    });
    return {
      AriaAttrNameToPropNameMap,
      AriaPropNameToAttrNameMap
    };
  })();
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  // Inspired from: https://mathiasbynens.be/notes/globalthis


  const _globalThis = /*@__PURE__*/function () {
    // On recent browsers, `globalThis` is already defined. In this case return it directly.
    if (typeof globalThis === 'object') {
      return globalThis;
    }

    let _globalThis;

    try {
      // eslint-disable-next-line no-extend-native
      Object.defineProperty(Object.prototype, '__magic__', {
        get: function () {
          return this;
        },
        configurable: true
      }); // __magic__ is undefined in Safari 10 and IE10 and older.
      // @ts-ignore
      // eslint-disable-next-line no-undef

      _globalThis = __magic__; // @ts-ignore

      delete Object.prototype.__magic__;
    } catch (ex) {// In IE8, Object.defineProperty only works on DOM objects.
    } finally {
      // If the magic above fails for some reason we assume that we are in a legacy browser.
      // Assume `window` exists in this case.
      if (typeof _globalThis === 'undefined') {
        // @ts-ignore
        _globalThis = window;
      }
    }

    return _globalThis;
  }();
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const KEY__IS_NATIVE_SHADOW_ROOT_DEFINED = '$isNativeShadowRootDefined$';
  const KEY__SHADOW_RESOLVER = '$shadowResolver$';
  const KEY__SHADOW_TOKEN = '$shadowToken$';
  const KEY__SYNTHETIC_MODE = '$$lwc-synthetic-mode';
  const KEY__SCOPED_CSS = '$scoped$';
  /**
   * Map composed of properties to attributes not following the HTML property to attribute mapping
   * convention.
   */

  const NO_STANDARD_PROPERTY_ATTRIBUTE_MAPPING = new Map([['accessKey', 'accesskey'], ['readOnly', 'readonly'], ['tabIndex', 'tabindex'], ['bgColor', 'bgcolor'], ['colSpan', 'colspan'], ['rowSpan', 'rowspan'], ['contentEditable', 'contenteditable'], ['crossOrigin', 'crossorigin'], ['dateTime', 'datetime'], ['formAction', 'formaction'], ['isMap', 'ismap'], ['maxLength', 'maxlength'], ['minLength', 'minlength'], ['noValidate', 'novalidate'], ['useMap', 'usemap'], ['htmlFor', 'for']]);
  /**
   * Map associating previously transformed HTML property into HTML attribute.
   */

  const CACHED_PROPERTY_ATTRIBUTE_MAPPING = new Map();

  function htmlPropertyToAttribute(propName) {
    const ariaAttributeName = AriaPropNameToAttrNameMap[propName];

    if (!isUndefined$1(ariaAttributeName)) {
      return ariaAttributeName;
    }

    const specialAttributeName = NO_STANDARD_PROPERTY_ATTRIBUTE_MAPPING.get(propName);

    if (!isUndefined$1(specialAttributeName)) {
      return specialAttributeName;
    }

    const cachedAttributeName = CACHED_PROPERTY_ATTRIBUTE_MAPPING.get(propName);

    if (!isUndefined$1(cachedAttributeName)) {
      return cachedAttributeName;
    }

    let attributeName = '';

    for (let i = 0, len = propName.length; i < len; i++) {
      const code = StringCharCodeAt.call(propName, i);

      if (code >= 65 && // "A"
      code <= 90 // "Z"
      ) {
        attributeName += '-' + StringFromCharCode(code + 32);
      } else {
        attributeName += StringFromCharCode(code);
      }
    }

    CACHED_PROPERTY_ATTRIBUTE_MAPPING.set(propName, attributeName);
    return attributeName;
  }
  /** version: 2.5.4 */

  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function detect(propName) {
    return Object.getOwnPropertyDescriptor(Element.prototype, propName) === undefined;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const nodeToAriaPropertyValuesMap = new WeakMap();

  function getAriaPropertyMap(elm) {
    let map = nodeToAriaPropertyValuesMap.get(elm);

    if (map === undefined) {
      map = {};
      nodeToAriaPropertyValuesMap.set(elm, map);
    }

    return map;
  }

  function getNormalizedAriaPropertyValue(value) {
    return value == null ? null : String(value);
  }

  function createAriaPropertyPropertyDescriptor(propName, attrName) {
    return {
      get() {
        const map = getAriaPropertyMap(this);

        if (hasOwnProperty$1.call(map, propName)) {
          return map[propName];
        } // otherwise just reflect what's in the attribute


        return this.hasAttribute(attrName) ? this.getAttribute(attrName) : null;
      },

      set(newValue) {
        const normalizedValue = getNormalizedAriaPropertyValue(newValue);
        const map = getAriaPropertyMap(this);
        map[propName] = normalizedValue; // reflect into the corresponding attribute

        if (newValue === null) {
          this.removeAttribute(attrName);
        } else {
          this.setAttribute(attrName, newValue);
        }
      },

      configurable: true,
      enumerable: true
    };
  }

  function patch(propName) {
    // Typescript is inferring the wrong function type for this particular
    // overloaded method: https://github.com/Microsoft/TypeScript/issues/27972
    // @ts-ignore type-mismatch
    const attrName = AriaPropNameToAttrNameMap[propName];
    const descriptor = createAriaPropertyPropertyDescriptor(propName, attrName);
    Object.defineProperty(Element.prototype, propName, descriptor);
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const ElementPrototypeAriaPropertyNames = keys(AriaPropNameToAttrNameMap);

  for (let i = 0, len = ElementPrototypeAriaPropertyNames.length; i < len; i += 1) {
    const propName = ElementPrototypeAriaPropertyNames[i];

    if (detect(propName)) {
      patch(propName);
    }
  }
  /**
   * Copyright (C) 2018 salesforce.com, inc.
   */

  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const features = {
    ENABLE_REACTIVE_SETTER: null,
    ENABLE_HMR: null,
    ENABLE_INNER_OUTER_TEXT_PATCH: null,
    ENABLE_ELEMENT_PATCH: null,
    ENABLE_FORCE_NATIVE_SHADOW_MODE_FOR_TEST: null,
    ENABLE_NODE_LIST_PATCH: null,
    ENABLE_HTML_COLLECTIONS_PATCH: null,
    ENABLE_NODE_PATCH: null,
    ENABLE_NON_COMPOSED_EVENTS_LEAKAGE: null,
    ENABLE_MIXED_SHADOW_MODE: null,
    ENABLE_WIRE_SYNC_EMIT: null
  };

  if (!_globalThis.lwcRuntimeFlags) {
    Object.defineProperty(_globalThis, 'lwcRuntimeFlags', {
      value: create(null)
    });
  }

  const runtimeFlags = _globalThis.lwcRuntimeFlags;
  /**
   * Set the value at runtime of a given feature flag. This method only be invoked once per feature
   * flag. It is meant to be used during the app initialization.
   */

  function setFeatureFlag(name, value) {
    if (!isBoolean(value)) {
      const message = `Failed to set the value "${value}" for the runtime feature flag "${name}". Runtime feature flags can only be set to a boolean value.`;

      {
        // eslint-disable-next-line no-console
        console.error(message);
        return;
      }
    }

    if (isUndefined$1(features[name])) {
      const availableFlags = keys(features).map(name => `"${name}"`).join(', '); // eslint-disable-next-line no-console

      console.warn(`Failed to set the value "${value}" for the runtime feature flag "${name}" because it is undefined. Available flags: ${availableFlags}.`);
      return;
    }

    {
      // Disallow the same flag to be set more than once in production
      const runtimeValue = runtimeFlags[name];

      if (!isUndefined$1(runtimeValue)) {
        // eslint-disable-next-line no-console
        console.error(`Failed to set the value "${value}" for the runtime feature flag "${name}". "${name}" has already been set with the value "${runtimeValue}".`);
        return;
      }

      defineProperty(runtimeFlags, name, {
        value
      });
    }
  }
  /**
   * Set the value at runtime of a given feature flag. This method should only be used for testing
   * purposes. It is a no-op when invoked in production mode.
   */


  function setFeatureFlagForTest(name, value) {
  }
  /** version: 2.5.4 */

  /* proxy-compat-disable */

  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  let nextTickCallbackQueue = [];
  const SPACE_CHAR = 32;
  const EmptyObject = seal(create(null));
  const EmptyArray = seal([]);

  function flushCallbackQueue() {

    const callbacks = nextTickCallbackQueue;
    nextTickCallbackQueue = []; // reset to a new queue

    for (let i = 0, len = callbacks.length; i < len; i += 1) {
      callbacks[i]();
    }
  }

  function addCallbackToNextTick(callback) {

    if (nextTickCallbackQueue.length === 0) {
      Promise.resolve().then(flushCallbackQueue);
    }

    ArrayPush$1.call(nextTickCallbackQueue, callback);
  }

  function guid() {
    function s4() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }

    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
  }
  /*
   * Copyright (c) 2019, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const TargetToReactiveRecordMap = new WeakMap();

  function getReactiveRecord(target) {
    let reactiveRecord = TargetToReactiveRecordMap.get(target);

    if (isUndefined$1(reactiveRecord)) {
      const newRecord = create(null);
      reactiveRecord = newRecord;
      TargetToReactiveRecordMap.set(target, newRecord);
    }

    return reactiveRecord;
  }

  let currentReactiveObserver = null;

  function valueMutated(target, key) {
    const reactiveRecord = TargetToReactiveRecordMap.get(target);

    if (!isUndefined$1(reactiveRecord)) {
      const reactiveObservers = reactiveRecord[key];

      if (!isUndefined$1(reactiveObservers)) {
        for (let i = 0, len = reactiveObservers.length; i < len; i += 1) {
          const ro = reactiveObservers[i];
          ro.notify();
        }
      }
    }
  }

  function valueObserved(target, key) {
    // We should determine if an active Observing Record is present to track mutations.
    if (currentReactiveObserver === null) {
      return;
    }

    const ro = currentReactiveObserver;
    const reactiveRecord = getReactiveRecord(target);
    let reactiveObservers = reactiveRecord[key];

    if (isUndefined$1(reactiveObservers)) {
      reactiveObservers = [];
      reactiveRecord[key] = reactiveObservers;
    } else if (reactiveObservers[0] === ro) {
      return; // perf optimization considering that most subscriptions will come from the same record
    }

    if (ArrayIndexOf.call(reactiveObservers, ro) === -1) {
      ro.link(reactiveObservers);
    }
  }

  class ReactiveObserver {
    constructor(callback) {
      this.listeners = [];
      this.callback = callback;
    }

    observe(job) {
      const inceptionReactiveRecord = currentReactiveObserver;
      currentReactiveObserver = this;
      let error;

      try {
        job();
      } catch (e) {
        error = Object(e);
      } finally {
        currentReactiveObserver = inceptionReactiveRecord;

        if (error !== undefined) {
          throw error; // eslint-disable-line no-unsafe-finally
        }
      }
    }
    /**
     * This method is responsible for disconnecting the Reactive Observer
     * from any Reactive Record that has a reference to it, to prevent future
     * notifications about previously recorded access.
     */


    reset() {
      const {
        listeners
      } = this;
      const len = listeners.length;

      if (len > 0) {
        for (let i = 0; i < len; i += 1) {
          const set = listeners[i];
          const pos = ArrayIndexOf.call(listeners[i], this);
          ArraySplice.call(set, pos, 1);
        }

        listeners.length = 0;
      }
    } // friend methods


    notify() {
      this.callback.call(undefined, this);
    }

    link(reactiveObservers) {
      ArrayPush$1.call(reactiveObservers, this); // we keep track of observing records where the observing record was added to so we can do some clean up later on

      ArrayPush$1.call(this.listeners, reactiveObservers);
    }

  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function componentValueMutated(vm, key) {
    valueMutated(vm.component, key);
  }

  function componentValueObserved(vm, key) {
    valueObserved(vm.component, key);
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function getComponentTag(vm) {
    return `<${StringToLowerCase.call(vm.tagName)}>`;
  } // TODO [#1695]: Unify getComponentStack and getErrorComponentStack

  function getErrorComponentStack(vm) {
    const wcStack = [];
    let currentVm = vm;

    while (!isNull(currentVm)) {
      ArrayPush$1.call(wcStack, getComponentTag(currentVm));
      currentVm = currentVm.owner;
    }

    return wcStack.reverse().join('\n\t');
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function handleEvent(event, vnode) {
    const {
      type
    } = event;
    const {
      data: {
        on
      }
    } = vnode;
    const handler = on && on[type]; // call event handler if exists

    if (handler) {
      handler.call(undefined, event);
    }
  }

  function createListener() {
    return function handler(event) {
      handleEvent(event, handler.vnode);
    };
  }

  function updateAllEventListeners(oldVnode, vnode) {
    if (isUndefined$1(oldVnode.listener)) {
      createAllEventListeners(vnode);
    } else {
      vnode.listener = oldVnode.listener;
      vnode.listener.vnode = vnode;
    }
  }

  function createAllEventListeners(vnode) {
    const {
      elm,
      data: {
        on
      },
      owner: {
        renderer
      }
    } = vnode;

    if (isUndefined$1(on)) {
      return;
    }

    const listener = vnode.listener = createListener();
    listener.vnode = vnode;
    let name;

    for (name in on) {
      renderer.addEventListener(elm, name, listener);
    }
  }

  var modEvents = {
    update: updateAllEventListeners,
    create: createAllEventListeners
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  const defaultDefHTMLPropertyNames = ['accessKey', 'dir', 'draggable', 'hidden', 'id', 'lang', 'spellcheck', 'tabIndex', 'title'];

  function offsetPropertyErrorMessage(name) {
    return `Using the \`${name}\` property is an anti-pattern because it rounds the value to an integer. Instead, use the \`getBoundingClientRect\` method to obtain fractional values for the size of an element and its position relative to the viewport.`;
  } // Global HTML Attributes & Properties
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement


  assign(create(null), {
    accessKey: {
      attribute: 'accesskey'
    },
    accessKeyLabel: {
      readOnly: true
    },
    className: {
      attribute: 'class',
      error: 'Using the `className` property is an anti-pattern because of slow runtime behavior and potential conflicts with classes provided by the owner element. Use the `classList` API instead.'
    },
    contentEditable: {
      attribute: 'contenteditable'
    },
    dataset: {
      readOnly: true,
      error: "Using the `dataset` property is an anti-pattern because it can't be statically analyzed. Expose each property individually using the `@api` decorator instead."
    },
    dir: {
      attribute: 'dir'
    },
    draggable: {
      attribute: 'draggable'
    },
    dropzone: {
      attribute: 'dropzone',
      readOnly: true
    },
    hidden: {
      attribute: 'hidden'
    },
    id: {
      attribute: 'id'
    },
    inputMode: {
      attribute: 'inputmode'
    },
    lang: {
      attribute: 'lang'
    },
    slot: {
      attribute: 'slot',
      error: 'Using the `slot` property is an anti-pattern.'
    },
    spellcheck: {
      attribute: 'spellcheck'
    },
    style: {
      attribute: 'style'
    },
    tabIndex: {
      attribute: 'tabindex'
    },
    title: {
      attribute: 'title'
    },
    translate: {
      attribute: 'translate'
    },
    // additional "global attributes" that are not present in the link above.
    isContentEditable: {
      readOnly: true
    },
    offsetHeight: {
      readOnly: true,
      error: offsetPropertyErrorMessage('offsetHeight')
    },
    offsetLeft: {
      readOnly: true,
      error: offsetPropertyErrorMessage('offsetLeft')
    },
    offsetParent: {
      readOnly: true
    },
    offsetTop: {
      readOnly: true,
      error: offsetPropertyErrorMessage('offsetTop')
    },
    offsetWidth: {
      readOnly: true,
      error: offsetPropertyErrorMessage('offsetWidth')
    },
    role: {
      attribute: 'role'
    }
  });
  let controlledElement = null;
  let controlledAttributeName;

  function isAttributeLocked(elm, attrName) {
    return elm !== controlledElement || attrName !== controlledAttributeName;
  }

  function lockAttribute(_elm, _key) {
    controlledElement = null;
    controlledAttributeName = undefined;
  }

  function unlockAttribute(elm, key) {
    controlledElement = elm;
    controlledAttributeName = key;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const xlinkNS = 'http://www.w3.org/1999/xlink';
  const xmlNS = 'http://www.w3.org/XML/1998/namespace';
  const ColonCharCode = 58;

  function updateAttrs(oldVnode, vnode) {
    const {
      data: {
        attrs
      },
      owner: {
        renderer
      }
    } = vnode;

    if (isUndefined$1(attrs)) {
      return;
    }

    let {
      data: {
        attrs: oldAttrs
      }
    } = oldVnode;

    if (oldAttrs === attrs) {
      return;
    }

    const elm = vnode.elm;
    const {
      setAttribute,
      removeAttribute
    } = renderer;
    let key;
    oldAttrs = isUndefined$1(oldAttrs) ? EmptyObject : oldAttrs; // update modified attributes, add new attributes
    // this routine is only useful for data-* attributes in all kind of elements
    // and aria-* in standard elements (custom elements will use props for these)

    for (key in attrs) {
      const cur = attrs[key];
      const old = oldAttrs[key];

      if (old !== cur) {
        unlockAttribute(elm, key);

        if (StringCharCodeAt.call(key, 3) === ColonCharCode) {
          // Assume xml namespace
          setAttribute(elm, key, cur, xmlNS);
        } else if (StringCharCodeAt.call(key, 5) === ColonCharCode) {
          // Assume xlink namespace
          setAttribute(elm, key, cur, xlinkNS);
        } else if (isNull(cur)) {
          removeAttribute(elm, key);
        } else {
          setAttribute(elm, key, cur);
        }

        lockAttribute();
      }
    }
  }

  const emptyVNode$3 = {
    data: {}
  };
  var modAttrs = {
    create: vnode => updateAttrs(emptyVNode$3, vnode),
    update: updateAttrs
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  function isLiveBindingProp(sel, key) {
    // For properties with live bindings, we read values from the DOM element
    // instead of relying on internally tracked values.
    return sel === 'input' && (key === 'value' || key === 'checked');
  }

  function update(oldVnode, vnode) {
    const props = vnode.data.props;

    if (isUndefined$1(props)) {
      return;
    }

    const oldProps = oldVnode.data.props;

    if (oldProps === props) {
      return;
    }

    const isFirstPatch = isUndefined$1(oldProps);
    const {
      elm,
      sel,
      owner: {
        renderer
      }
    } = vnode;

    for (const key in props) {
      const cur = props[key]; // if it is the first time this element is patched, or the current value is different to the previous value...

      if (isFirstPatch || cur !== (isLiveBindingProp(sel, key) ? renderer.getProperty(elm, key) : oldProps[key])) {
        renderer.setProperty(elm, key, cur);
      }
    }
  }

  const emptyVNode$2 = {
    data: {}
  };
  var modProps = {
    create: vnode => update(emptyVNode$2, vnode),
    update
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  const classNameToClassMap = create(null);

  function getMapFromClassName(className) {
    // Intentionally using == to match undefined and null values from computed style attribute
    if (className == null) {
      return EmptyObject;
    } // computed class names must be string


    className = isString(className) ? className : className + '';
    let map = classNameToClassMap[className];

    if (map) {
      return map;
    }

    map = create(null);
    let start = 0;
    let o;
    const len = className.length;

    for (o = 0; o < len; o++) {
      if (StringCharCodeAt.call(className, o) === SPACE_CHAR) {
        if (o > start) {
          map[StringSlice.call(className, start, o)] = true;
        }

        start = o + 1;
      }
    }

    if (o > start) {
      map[StringSlice.call(className, start, o)] = true;
    }

    classNameToClassMap[className] = map;

    return map;
  }

  function updateClassAttribute(oldVnode, vnode) {
    const {
      elm,
      data: {
        className: newClass
      },
      owner: {
        renderer
      }
    } = vnode;
    const {
      data: {
        className: oldClass
      }
    } = oldVnode;

    if (oldClass === newClass) {
      return;
    }

    const classList = renderer.getClassList(elm);
    const newClassMap = getMapFromClassName(newClass);
    const oldClassMap = getMapFromClassName(oldClass);
    let name;

    for (name in oldClassMap) {
      // remove only if it is not in the new class collection and it is not set from within the instance
      if (isUndefined$1(newClassMap[name])) {
        classList.remove(name);
      }
    }

    for (name in newClassMap) {
      if (isUndefined$1(oldClassMap[name])) {
        classList.add(name);
      }
    }
  }

  const emptyVNode$1 = {
    data: {}
  };
  var modComputedClassName = {
    create: vnode => updateClassAttribute(emptyVNode$1, vnode),
    update: updateClassAttribute
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  function updateStyleAttribute(oldVnode, vnode) {
    const {
      elm,
      data: {
        style: newStyle
      },
      owner: {
        renderer
      }
    } = vnode;
    const {
      setAttribute,
      removeAttribute
    } = renderer;

    if (oldVnode.data.style === newStyle) {
      return;
    }

    if (!isString(newStyle) || newStyle === '') {
      removeAttribute(elm, 'style');
    } else {
      setAttribute(elm, 'style', newStyle);
    }
  }

  const emptyVNode = {
    data: {}
  };
  var modComputedStyle = {
    create: vnode => updateStyleAttribute(emptyVNode, vnode),
    update: updateStyleAttribute
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  // The compiler takes care of transforming the inline classnames into an object. It's faster to set the
  // different classnames properties individually instead of via a string.

  function createClassAttribute(vnode) {
    const {
      elm,
      data: {
        classMap
      },
      owner: {
        renderer
      }
    } = vnode;

    if (isUndefined$1(classMap)) {
      return;
    }

    const classList = renderer.getClassList(elm);

    for (const name in classMap) {
      classList.add(name);
    }
  }

  var modStaticClassName = {
    create: createClassAttribute
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  // The compiler takes care of transforming the inline style into an object. It's faster to set the
  // different style properties individually instead of via a string.

  function createStyleAttribute(vnode) {
    const {
      elm,
      data: {
        styleDecls
      },
      owner: {
        renderer
      }
    } = vnode;

    if (isUndefined$1(styleDecls)) {
      return;
    }

    for (let i = 0; i < styleDecls.length; i++) {
      const [prop, value, important] = styleDecls[i];
      renderer.setCSSStyleProperty(elm, prop, value, important);
    }
  }

  var modStaticStyle = {
    create: createStyleAttribute
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
  @license
  Copyright (c) 2015 Simon Friis Vindum.
  This code may only be used under the MIT License found at
  https://github.com/snabbdom/snabbdom/blob/master/LICENSE
  Code distributed by Snabbdom as part of the Snabbdom project at
  https://github.com/snabbdom/snabbdom/
  */

  function isUndef(s) {
    return s === undefined;
  }

  function sameVnode(vnode1, vnode2) {
    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;
  }

  function isVNode(vnode) {
    return vnode != null;
  }

  function createKeyToOldIdx(children, beginIdx, endIdx) {
    const map = {};
    let j, key, ch; // TODO [#1637]: simplify this by assuming that all vnodes has keys

    for (j = beginIdx; j <= endIdx; ++j) {
      ch = children[j];

      if (isVNode(ch)) {
        key = ch.key;

        if (key !== undefined) {
          map[key] = j;
        }
      }
    }

    return map;
  }

  function addVnodes(parentElm, before, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      const ch = vnodes[startIdx];

      if (isVNode(ch)) {
        ch.hook.create(ch);
        ch.hook.insert(ch, parentElm, before);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      const ch = vnodes[startIdx]; // text nodes do not have logic associated to them

      if (isVNode(ch)) {
        ch.hook.remove(ch, parentElm);
      }
    }
  }

  function updateDynamicChildren(parentElm, oldCh, newCh) {
    let oldStartIdx = 0;
    let newStartIdx = 0;
    let oldEndIdx = oldCh.length - 1;
    let oldStartVnode = oldCh[0];
    let oldEndVnode = oldCh[oldEndIdx];
    const newChEnd = newCh.length - 1;
    let newEndIdx = newChEnd;
    let newStartVnode = newCh[0];
    let newEndVnode = newCh[newEndIdx];
    let oldKeyToIdx;
    let idxInOld;
    let elmToMove;
    let before;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (!isVNode(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
      } else if (!isVNode(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (!isVNode(newStartVnode)) {
        newStartVnode = newCh[++newStartIdx];
      } else if (!isVNode(newEndVnode)) {
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode);
        newEndVnode.hook.move(oldStartVnode, parentElm, oldEndVnode.owner.renderer.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode);
        newStartVnode.hook.move(oldEndVnode, parentElm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (oldKeyToIdx === undefined) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = oldKeyToIdx[newStartVnode.key];

        if (isUndef(idxInOld)) {
          // New element
          newStartVnode.hook.create(newStartVnode);
          newStartVnode.hook.insert(newStartVnode, parentElm, oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        } else {
          elmToMove = oldCh[idxInOld];

          if (isVNode(elmToMove)) {
            if (elmToMove.sel !== newStartVnode.sel) {
              // New element
              newStartVnode.hook.create(newStartVnode);
              newStartVnode.hook.insert(newStartVnode, parentElm, oldStartVnode.elm);
            } else {
              patchVnode(elmToMove, newStartVnode);
              oldCh[idxInOld] = undefined;
              newStartVnode.hook.move(elmToMove, parentElm, oldStartVnode.elm);
            }
          }

          newStartVnode = newCh[++newStartIdx];
        }
      }
    }

    if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {
      if (oldStartIdx > oldEndIdx) {
        // There's some cases in which the sub array of vnodes to be inserted is followed by null(s) and an
        // already processed vnode, in such cases the vnodes to be inserted should be before that processed vnode.
        let i = newEndIdx;
        let n;

        do {
          n = newCh[++i];
        } while (!isVNode(n) && i < newChEnd);

        before = isVNode(n) ? n.elm : null;
        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx);
      } else {
        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
      }
    }
  }

  function updateStaticChildren(parentElm, oldCh, newCh) {
    const oldChLength = oldCh.length;
    const newChLength = newCh.length;

    if (oldChLength === 0) {
      // the old list is empty, we can directly insert anything new
      addVnodes(parentElm, null, newCh, 0, newChLength);
      return;
    }

    if (newChLength === 0) {
      // the old list is nonempty and the new list is empty so we can directly remove all old nodes
      // this is the case in which the dynamic children of an if-directive should be removed
      removeVnodes(parentElm, oldCh, 0, oldChLength);
      return;
    } // if the old list is not empty, the new list MUST have the same
    // amount of nodes, that's why we call this static children


    let referenceElm = null;

    for (let i = newChLength - 1; i >= 0; i -= 1) {
      const vnode = newCh[i];
      const oldVNode = oldCh[i];

      if (vnode !== oldVNode) {
        if (isVNode(oldVNode)) {
          if (isVNode(vnode)) {
            // both vnodes must be equivalent, and se just need to patch them
            patchVnode(oldVNode, vnode);
            referenceElm = vnode.elm;
          } else {
            // removing the old vnode since the new one is null
            oldVNode.hook.remove(oldVNode, parentElm);
          }
        } else if (isVNode(vnode)) {
          // this condition is unnecessary
          vnode.hook.create(vnode); // insert the new node one since the old one is null

          vnode.hook.insert(vnode, parentElm, referenceElm);
          referenceElm = vnode.elm;
        }
      }
    }
  }

  function patchVnode(oldVnode, vnode) {
    if (oldVnode !== vnode) {
      vnode.elm = oldVnode.elm;
      vnode.hook.update(oldVnode, vnode);
    }
  }
  /*
   * Copyright (c) 2020, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  // This is a temporary workaround to get the @lwc/engine-server to evaluate in node without having
  // to inject at runtime.


  const HTMLElementConstructor$1 = typeof HTMLElement !== 'undefined' ? HTMLElement : function () {};
  const HTMLElementPrototype = HTMLElementConstructor$1.prototype;
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
   * This is a descriptor map that contains
   * all standard properties that a Custom Element can support (including AOM properties), which
   * determines what kind of capabilities the Base HTML Element and
   * Base Lightning Element should support.
   */

  const HTMLElementOriginalDescriptors = create(null);
  forEach.call(keys(AriaPropNameToAttrNameMap), propName => {
    // Note: intentionally using our in-house getPropertyDescriptor instead of getOwnPropertyDescriptor here because
    // in IE11, some properties are on Element.prototype instead of HTMLElement, just to be sure.
    const descriptor = getPropertyDescriptor(HTMLElementPrototype, propName);

    if (!isUndefined$1(descriptor)) {
      HTMLElementOriginalDescriptors[propName] = descriptor;
    }
  });
  forEach.call(defaultDefHTMLPropertyNames, propName => {
    // Note: intentionally using our in-house getPropertyDescriptor instead of getOwnPropertyDescriptor here because
    // in IE11, id property is on Element.prototype instead of HTMLElement, and we suspect that more will fall into
    // this category, so, better to be sure.
    const descriptor = getPropertyDescriptor(HTMLElementPrototype, propName);

    if (!isUndefined$1(descriptor)) {
      HTMLElementOriginalDescriptors[propName] = descriptor;
    }
  });
  /**
   * Copyright (C) 2017 salesforce.com, inc.
   */

  const {
    isArray
  } = Array;
  const {
    getPrototypeOf,
    create: ObjectCreate,
    defineProperty: ObjectDefineProperty,
    defineProperties: ObjectDefineProperties,
    isExtensible,
    getOwnPropertyDescriptor,
    getOwnPropertyNames,
    getOwnPropertySymbols,
    preventExtensions,
    hasOwnProperty
  } = Object;
  const {
    push: ArrayPush,
    concat: ArrayConcat,
    map: ArrayMap
  } = Array.prototype;

  function isUndefined(obj) {
    return obj === undefined;
  }

  function isFunction(obj) {
    return typeof obj === 'function';
  }

  const proxyToValueMap = new WeakMap();

  function registerProxy(proxy, value) {
    proxyToValueMap.set(proxy, value);
  }

  const unwrap$1 = replicaOrAny => proxyToValueMap.get(replicaOrAny) || replicaOrAny;

  class BaseProxyHandler {
    constructor(membrane, value) {
      this.originalTarget = value;
      this.membrane = membrane;
    } // Shared utility methods


    wrapDescriptor(descriptor) {
      if (hasOwnProperty.call(descriptor, 'value')) {
        descriptor.value = this.wrapValue(descriptor.value);
      } else {
        const {
          set: originalSet,
          get: originalGet
        } = descriptor;

        if (!isUndefined(originalGet)) {
          descriptor.get = this.wrapGetter(originalGet);
        }

        if (!isUndefined(originalSet)) {
          descriptor.set = this.wrapSetter(originalSet);
        }
      }

      return descriptor;
    }

    copyDescriptorIntoShadowTarget(shadowTarget, key) {
      const {
        originalTarget
      } = this; // Note: a property might get defined multiple times in the shadowTarget
      //       but it will always be compatible with the previous descriptor
      //       to preserve the object invariants, which makes these lines safe.

      const originalDescriptor = getOwnPropertyDescriptor(originalTarget, key);

      if (!isUndefined(originalDescriptor)) {
        const wrappedDesc = this.wrapDescriptor(originalDescriptor);
        ObjectDefineProperty(shadowTarget, key, wrappedDesc);
      }
    }

    lockShadowTarget(shadowTarget) {
      const {
        originalTarget
      } = this;
      const targetKeys = ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));
      targetKeys.forEach(key => {
        this.copyDescriptorIntoShadowTarget(shadowTarget, key);
      });
      const {
        membrane: {
          tagPropertyKey
        }
      } = this;

      if (!isUndefined(tagPropertyKey) && !hasOwnProperty.call(shadowTarget, tagPropertyKey)) {
        ObjectDefineProperty(shadowTarget, tagPropertyKey, ObjectCreate(null));
      }

      preventExtensions(shadowTarget);
    } // Shared Traps


    apply(shadowTarget, thisArg, argArray) {
      /* No op */
    }

    construct(shadowTarget, argArray, newTarget) {
      /* No op */
    }

    get(shadowTarget, key) {
      const {
        originalTarget,
        membrane: {
          valueObserved
        }
      } = this;
      const value = originalTarget[key];
      valueObserved(originalTarget, key);
      return this.wrapValue(value);
    }

    has(shadowTarget, key) {
      const {
        originalTarget,
        membrane: {
          tagPropertyKey,
          valueObserved
        }
      } = this;
      valueObserved(originalTarget, key); // since key is never going to be undefined, and tagPropertyKey might be undefined
      // we can simply compare them as the second part of the condition.

      return key in originalTarget || key === tagPropertyKey;
    }

    ownKeys(shadowTarget) {
      const {
        originalTarget,
        membrane: {
          tagPropertyKey
        }
      } = this; // if the membrane tag key exists and it is not in the original target, we add it to the keys.

      const keys = isUndefined(tagPropertyKey) || hasOwnProperty.call(originalTarget, tagPropertyKey) ? [] : [tagPropertyKey]; // small perf optimization using push instead of concat to avoid creating an extra array

      ArrayPush.apply(keys, getOwnPropertyNames(originalTarget));
      ArrayPush.apply(keys, getOwnPropertySymbols(originalTarget));
      return keys;
    }

    isExtensible(shadowTarget) {
      const {
        originalTarget
      } = this; // optimization to avoid attempting to lock down the shadowTarget multiple times

      if (!isExtensible(shadowTarget)) {
        return false; // was already locked down
      }

      if (!isExtensible(originalTarget)) {
        this.lockShadowTarget(shadowTarget);
        return false;
      }

      return true;
    }

    getPrototypeOf(shadowTarget) {
      const {
        originalTarget
      } = this;
      return getPrototypeOf(originalTarget);
    }

    getOwnPropertyDescriptor(shadowTarget, key) {
      const {
        originalTarget,
        membrane: {
          valueObserved,
          tagPropertyKey
        }
      } = this; // keys looked up via getOwnPropertyDescriptor need to be reactive

      valueObserved(originalTarget, key);
      let desc = getOwnPropertyDescriptor(originalTarget, key);

      if (isUndefined(desc)) {
        if (key !== tagPropertyKey) {
          return undefined;
        } // if the key is the membrane tag key, and is not in the original target,
        // we produce a synthetic descriptor and install it on the shadow target


        desc = {
          value: undefined,
          writable: false,
          configurable: false,
          enumerable: false
        };
        ObjectDefineProperty(shadowTarget, tagPropertyKey, desc);
        return desc;
      }

      if (desc.configurable === false) {
        // updating the descriptor to non-configurable on the shadow
        this.copyDescriptorIntoShadowTarget(shadowTarget, key);
      } // Note: by accessing the descriptor, the key is marked as observed
      // but access to the value, setter or getter (if available) cannot observe
      // mutations, just like regular methods, in which case we just do nothing.


      return this.wrapDescriptor(desc);
    }

  }

  const getterMap = new WeakMap();
  const setterMap = new WeakMap();
  const reverseGetterMap = new WeakMap();
  const reverseSetterMap = new WeakMap();

  class ReactiveProxyHandler extends BaseProxyHandler {
    wrapValue(value) {
      return this.membrane.getProxy(value);
    }

    wrapGetter(originalGet) {
      const wrappedGetter = getterMap.get(originalGet);

      if (!isUndefined(wrappedGetter)) {
        return wrappedGetter;
      }

      const handler = this;

      const get = function () {
        // invoking the original getter with the original target
        return handler.wrapValue(originalGet.call(unwrap$1(this)));
      };

      getterMap.set(originalGet, get);
      reverseGetterMap.set(get, originalGet);
      return get;
    }

    wrapSetter(originalSet) {
      const wrappedSetter = setterMap.get(originalSet);

      if (!isUndefined(wrappedSetter)) {
        return wrappedSetter;
      }

      const set = function (v) {
        // invoking the original setter with the original target
        originalSet.call(unwrap$1(this), unwrap$1(v));
      };

      setterMap.set(originalSet, set);
      reverseSetterMap.set(set, originalSet);
      return set;
    }

    unwrapDescriptor(descriptor) {
      if (hasOwnProperty.call(descriptor, 'value')) {
        // dealing with a data descriptor
        descriptor.value = unwrap$1(descriptor.value);
      } else {
        const {
          set,
          get
        } = descriptor;

        if (!isUndefined(get)) {
          descriptor.get = this.unwrapGetter(get);
        }

        if (!isUndefined(set)) {
          descriptor.set = this.unwrapSetter(set);
        }
      }

      return descriptor;
    }

    unwrapGetter(redGet) {
      const reverseGetter = reverseGetterMap.get(redGet);

      if (!isUndefined(reverseGetter)) {
        return reverseGetter;
      }

      const handler = this;

      const get = function () {
        // invoking the red getter with the proxy of this
        return unwrap$1(redGet.call(handler.wrapValue(this)));
      };

      getterMap.set(get, redGet);
      reverseGetterMap.set(redGet, get);
      return get;
    }

    unwrapSetter(redSet) {
      const reverseSetter = reverseSetterMap.get(redSet);

      if (!isUndefined(reverseSetter)) {
        return reverseSetter;
      }

      const handler = this;

      const set = function (v) {
        // invoking the red setter with the proxy of this
        redSet.call(handler.wrapValue(this), handler.wrapValue(v));
      };

      setterMap.set(set, redSet);
      reverseSetterMap.set(redSet, set);
      return set;
    }

    set(shadowTarget, key, value) {
      const {
        originalTarget,
        membrane: {
          valueMutated
        }
      } = this;
      const oldValue = originalTarget[key];

      if (oldValue !== value) {
        originalTarget[key] = value;
        valueMutated(originalTarget, key);
      } else if (key === 'length' && isArray(originalTarget)) {
        // fix for issue #236: push will add the new index, and by the time length
        // is updated, the internal length is already equal to the new length value
        // therefore, the oldValue is equal to the value. This is the forking logic
        // to support this use case.
        valueMutated(originalTarget, key);
      }

      return true;
    }

    deleteProperty(shadowTarget, key) {
      const {
        originalTarget,
        membrane: {
          valueMutated
        }
      } = this;
      delete originalTarget[key];
      valueMutated(originalTarget, key);
      return true;
    }

    setPrototypeOf(shadowTarget, prototype) {
    }

    preventExtensions(shadowTarget) {
      if (isExtensible(shadowTarget)) {
        const {
          originalTarget
        } = this;
        preventExtensions(originalTarget); // if the originalTarget is a proxy itself, it might reject
        // the preventExtension call, in which case we should not attempt to lock down
        // the shadow target.

        if (isExtensible(originalTarget)) {
          return false;
        }

        this.lockShadowTarget(shadowTarget);
      }

      return true;
    }

    defineProperty(shadowTarget, key, descriptor) {
      const {
        originalTarget,
        membrane: {
          valueMutated,
          tagPropertyKey
        }
      } = this;

      if (key === tagPropertyKey && !hasOwnProperty.call(originalTarget, key)) {
        // To avoid leaking the membrane tag property into the original target, we must
        // be sure that the original target doesn't have yet.
        // NOTE: we do not return false here because Object.freeze and equivalent operations
        // will attempt to set the descriptor to the same value, and expect no to throw. This
        // is an small compromise for the sake of not having to diff the descriptors.
        return true;
      }

      ObjectDefineProperty(originalTarget, key, this.unwrapDescriptor(descriptor)); // intentionally testing if false since it could be undefined as well

      if (descriptor.configurable === false) {
        this.copyDescriptorIntoShadowTarget(shadowTarget, key);
      }

      valueMutated(originalTarget, key);
      return true;
    }

  }

  const getterMap$1 = new WeakMap();
  const setterMap$1 = new WeakMap();

  class ReadOnlyHandler extends BaseProxyHandler {
    wrapValue(value) {
      return this.membrane.getReadOnlyProxy(value);
    }

    wrapGetter(originalGet) {
      const wrappedGetter = getterMap$1.get(originalGet);

      if (!isUndefined(wrappedGetter)) {
        return wrappedGetter;
      }

      const handler = this;

      const get = function () {
        // invoking the original getter with the original target
        return handler.wrapValue(originalGet.call(unwrap$1(this)));
      };

      getterMap$1.set(originalGet, get);
      return get;
    }

    wrapSetter(originalSet) {
      const wrappedSetter = setterMap$1.get(originalSet);

      if (!isUndefined(wrappedSetter)) {
        return wrappedSetter;
      }

      const set = function (v) {
      };

      setterMap$1.set(originalSet, set);
      return set;
    }

    set(shadowTarget, key, value) {

      return false;
    }

    deleteProperty(shadowTarget, key) {

      return false;
    }

    setPrototypeOf(shadowTarget, prototype) {
    }

    preventExtensions(shadowTarget) {

      return false;
    }

    defineProperty(shadowTarget, key, descriptor) {

      return false;
    }

  }

  const ObjectDotPrototype = Object.prototype;

  function defaultValueIsObservable(value) {
    // intentionally checking for null
    if (value === null) {
      return false;
    } // treat all non-object types, including undefined, as non-observable values


    if (typeof value !== 'object') {
      return false;
    }

    if (isArray(value)) {
      return true;
    }

    const proto = getPrototypeOf(value);
    return proto === ObjectDotPrototype || proto === null || getPrototypeOf(proto) === null;
  }

  const defaultValueObserved = (obj, key) => {
    /* do nothing */
  };

  const defaultValueMutated = (obj, key) => {
    /* do nothing */
  };

  const defaultValueDistortion = value => value;

  function createShadowTarget(value) {
    return isArray(value) ? [] : {};
  }

  class ReactiveMembrane {
    constructor(options) {
      this.valueDistortion = defaultValueDistortion;
      this.valueMutated = defaultValueMutated;
      this.valueObserved = defaultValueObserved;
      this.valueIsObservable = defaultValueIsObservable;
      this.objectGraph = new WeakMap();

      if (!isUndefined(options)) {
        const {
          valueDistortion,
          valueMutated,
          valueObserved,
          valueIsObservable,
          tagPropertyKey
        } = options;
        this.valueDistortion = isFunction(valueDistortion) ? valueDistortion : defaultValueDistortion;
        this.valueMutated = isFunction(valueMutated) ? valueMutated : defaultValueMutated;
        this.valueObserved = isFunction(valueObserved) ? valueObserved : defaultValueObserved;
        this.valueIsObservable = isFunction(valueIsObservable) ? valueIsObservable : defaultValueIsObservable;
        this.tagPropertyKey = tagPropertyKey;
      }
    }

    getProxy(value) {
      const unwrappedValue = unwrap$1(value);
      const distorted = this.valueDistortion(unwrappedValue);

      if (this.valueIsObservable(distorted)) {
        const o = this.getReactiveState(unwrappedValue, distorted); // when trying to extract the writable version of a readonly
        // we return the readonly.

        return o.readOnly === value ? value : o.reactive;
      }

      return distorted;
    }

    getReadOnlyProxy(value) {
      value = unwrap$1(value);
      const distorted = this.valueDistortion(value);

      if (this.valueIsObservable(distorted)) {
        return this.getReactiveState(value, distorted).readOnly;
      }

      return distorted;
    }

    unwrapProxy(p) {
      return unwrap$1(p);
    }

    getReactiveState(value, distortedValue) {
      const {
        objectGraph
      } = this;
      let reactiveState = objectGraph.get(distortedValue);

      if (reactiveState) {
        return reactiveState;
      }

      const membrane = this;
      reactiveState = {
        get reactive() {
          const reactiveHandler = new ReactiveProxyHandler(membrane, distortedValue); // caching the reactive proxy after the first time it is accessed

          const proxy = new Proxy(createShadowTarget(distortedValue), reactiveHandler);
          registerProxy(proxy, value);
          ObjectDefineProperty(this, 'reactive', {
            value: proxy
          });
          return proxy;
        },

        get readOnly() {
          const readOnlyHandler = new ReadOnlyHandler(membrane, distortedValue); // caching the readOnly proxy after the first time it is accessed

          const proxy = new Proxy(createShadowTarget(distortedValue), readOnlyHandler);
          registerProxy(proxy, value);
          ObjectDefineProperty(this, 'readOnly', {
            value: proxy
          });
          return proxy;
        }

      };
      objectGraph.set(distortedValue, reactiveState);
      return reactiveState;
    }

  }
  /** version: 1.0.0 */

  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const lockerLivePropertyKey = Symbol.for('@@lockerLiveValue');

  function valueDistortion(value) {
    return value;
  }

  const reactiveMembrane = new ReactiveMembrane({
    valueObserved,
    valueMutated,
    valueDistortion,
    tagPropertyKey: lockerLivePropertyKey
  });
  /**
   * EXPERIMENTAL: This function implements an unwrap mechanism that
   * works for observable membrane objects. This API is subject to
   * change or being removed.
   */

  const unwrap = function (value) {
    const unwrapped = reactiveMembrane.unwrapProxy(value);

    if (unwrapped !== value) {
      // if value is a proxy, unwrap to access original value and apply distortion
      return valueDistortion(unwrapped);
    }

    return value;
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
   * This operation is called with a descriptor of an standard html property
   * that a Custom Element can support (including AOM properties), which
   * determines what kind of capabilities the Base Lightning Element should support. When producing the new descriptors
   * for the Base Lightning Element, it also include the reactivity bit, so the standard property is reactive.
   */


  function createBridgeToElementDescriptor(propName, descriptor) {
    const {
      get,
      set,
      enumerable,
      configurable
    } = descriptor;

    if (!isFunction$1(get)) {

      throw new TypeError();
    }

    if (!isFunction$1(set)) {

      throw new TypeError();
    }

    return {
      enumerable,
      configurable,

      get() {
        const vm = getAssociatedVM(this);

        if (isBeingConstructed(vm)) {

          return;
        }

        componentValueObserved(vm, propName);
        return get.call(vm.elm);
      },

      set(newValue) {
        const vm = getAssociatedVM(this);

        if (newValue !== vm.cmpProps[propName]) {
          vm.cmpProps[propName] = newValue;
          componentValueMutated(vm, propName);
        }

        return set.call(vm.elm, newValue);
      }

    };
  }
  /**
   * This class is the base class for any LWC element.
   * Some elements directly extends this class, others implement it via inheritance.
   **/
  // @ts-ignore


  const LightningElement = function () {


    if (isNull(vmBeingConstructed)) {
      throw new ReferenceError('Illegal constructor');
    }

    const vm = vmBeingConstructed;
    const {
      def,
      elm,
      renderer
    } = vm;
    const {
      bridge
    } = def;

    const component = this;
    setPrototypeOf(elm, bridge.prototype);
    vm.component = this; // Locker hooks assignment. When the LWC engine run with Locker, Locker intercepts all the new
    // component creation and passes hooks to instrument all the component interactions with the
    // engine. We are intentionally hiding this argument from the formal API of LightningElement
    // because we don't want folks to know about it just yet.

    if (arguments.length === 1) {
      const {
        callHook,
        setHook,
        getHook
      } = arguments[0];
      vm.callHook = callHook;
      vm.setHook = setHook;
      vm.getHook = getHook;
    } // Making the component instance a live value when using Locker to support expandos.


    this[lockerLivePropertyKey] = undefined; // Linking elm, shadow root and component with the VM.

    associateVM(component, vm);
    associateVM(elm, vm);

    if (vm.renderMode === 1
    /* Shadow */
    ) {
      attachShadow(vm);
    } // Adding extra guard rails in DEV mode.

    return this;
  };

  function attachShadow(vm) {
    const {
      elm,
      mode,
      renderer,
      shadowMode,
      def: {
        ctor
      }
    } = vm;
    const cmpRoot = renderer.attachShadow(elm, {
      [KEY__SYNTHETIC_MODE]: shadowMode === 1
      /* Synthetic */
      ,
      delegatesFocus: Boolean(ctor.delegatesFocus),
      mode
    });
    vm.cmpRoot = cmpRoot;
    associateVM(cmpRoot, vm);
  }


  LightningElement.prototype = {
    constructor: LightningElement,

    dispatchEvent(event) {
      const {
        elm,
        renderer: {
          dispatchEvent
        }
      } = getAssociatedVM(this);
      return dispatchEvent(elm, event);
    },

    addEventListener(type, listener, options) {
      const vm = getAssociatedVM(this);
      const {
        elm,
        renderer: {
          addEventListener
        }
      } = vm;

      const wrappedListener = getWrappedComponentsListener(vm, listener);
      addEventListener(elm, type, wrappedListener, options);
    },

    removeEventListener(type, listener, options) {
      const vm = getAssociatedVM(this);
      const {
        elm,
        renderer: {
          removeEventListener
        }
      } = vm;
      const wrappedListener = getWrappedComponentsListener(vm, listener);
      removeEventListener(elm, type, wrappedListener, options);
    },

    hasAttribute(name) {
      const {
        elm,
        renderer: {
          getAttribute
        }
      } = getAssociatedVM(this);
      return !isNull(getAttribute(elm, name));
    },

    hasAttributeNS(namespace, name) {
      const {
        elm,
        renderer: {
          getAttribute
        }
      } = getAssociatedVM(this);
      return !isNull(getAttribute(elm, name, namespace));
    },

    removeAttribute(name) {
      const {
        elm,
        renderer: {
          removeAttribute
        }
      } = getAssociatedVM(this);
      unlockAttribute(elm, name);
      removeAttribute(elm, name);
      lockAttribute();
    },

    removeAttributeNS(namespace, name) {
      const {
        elm,
        renderer: {
          removeAttribute
        }
      } = getAssociatedVM(this);
      unlockAttribute(elm, name);
      removeAttribute(elm, name, namespace);
      lockAttribute();
    },

    getAttribute(name) {
      const {
        elm,
        renderer: {
          getAttribute
        }
      } = getAssociatedVM(this);
      return getAttribute(elm, name);
    },

    getAttributeNS(namespace, name) {
      const {
        elm,
        renderer: {
          getAttribute
        }
      } = getAssociatedVM(this);
      return getAttribute(elm, name, namespace);
    },

    setAttribute(name, value) {
      const vm = getAssociatedVM(this);
      const {
        elm,
        renderer: {
          setAttribute
        }
      } = vm;

      unlockAttribute(elm, name);
      setAttribute(elm, name, value);
      lockAttribute();
    },

    setAttributeNS(namespace, name, value) {
      const vm = getAssociatedVM(this);
      const {
        elm,
        renderer: {
          setAttribute
        }
      } = vm;

      unlockAttribute(elm, name);
      setAttribute(elm, name, value, namespace);
      lockAttribute();
    },

    getBoundingClientRect() {
      const vm = getAssociatedVM(this);
      const {
        elm,
        renderer: {
          getBoundingClientRect
        }
      } = vm;

      return getBoundingClientRect(elm);
    },

    get isConnected() {
      const {
        elm,
        renderer: {
          isConnected
        }
      } = getAssociatedVM(this);
      return isConnected(elm);
    },

    get classList() {
      const vm = getAssociatedVM(this);
      const {
        elm,
        renderer: {
          getClassList
        }
      } = vm;

      return getClassList(elm);
    },

    get template() {
      const vm = getAssociatedVM(this);

      return vm.cmpRoot;
    },

    get shadowRoot() {
      // From within the component instance, the shadowRoot is always reported as "closed".
      // Authors should rely on this.template instead.
      return null;
    },

    render() {
      const vm = getAssociatedVM(this);
      return vm.def.template;
    },

    toString() {
      const vm = getAssociatedVM(this);
      return `[object ${vm.def.name}]`;
    }

  };
  const queryAndChildGetterDescriptors = create(null);
  const childGetters = [['children', 'getChildren'], ['childNodes', 'getChildNodes'], ['firstChild', 'getFirstChild'], ['firstElementChild', 'getFirstElementChild'], ['lastChild', 'getLastChild'], ['lastElementChild', 'getLastElementChild']]; // Generic passthrough for child getters on HTMLElement to the relevant Renderer APIs

  for (const [elementProp, rendererMethod] of childGetters) {
    queryAndChildGetterDescriptors[elementProp] = {
      get() {
        const vm = getAssociatedVM(this);
        const {
          elm,
          renderer
        } = vm;

        return renderer[rendererMethod](elm);
      }

    };
  }

  const queryMethods = ['getElementsByClassName', 'getElementsByTagName', 'querySelector', 'querySelectorAll']; // Generic passthrough for query APIs on HTMLElement to the relevant Renderer APIs

  for (const queryMethod of queryMethods) {
    queryAndChildGetterDescriptors[queryMethod] = {
      value(arg) {
        const vm = getAssociatedVM(this);
        const {
          elm,
          renderer
        } = vm;

        return renderer[queryMethod](elm, arg);
      }

    };
  }

  defineProperties(LightningElement.prototype, queryAndChildGetterDescriptors);
  const lightningBasedDescriptors = create(null);

  for (const propName in HTMLElementOriginalDescriptors) {
    lightningBasedDescriptors[propName] = createBridgeToElementDescriptor(propName, HTMLElementOriginalDescriptors[propName]);
  }

  defineProperties(LightningElement.prototype, lightningBasedDescriptors);
  defineProperty(LightningElement, 'CustomElementConstructor', {
    get() {
      // If required, a runtime-specific implementation must be defined.
      throw new ReferenceError('The current runtime does not support CustomElementConstructor.');
    },

    configurable: true
  });
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
   * @wire decorator to wire fields and methods to a wire adapter in
   * LWC Components. This function implements the internals of this
   * decorator.
   */


  function wire(_adapter, _config) {

    throw new Error();
  }

  function internalWireFieldDecorator(key) {
    return {
      get() {
        const vm = getAssociatedVM(this);
        componentValueObserved(vm, key);
        return vm.cmpFields[key];
      },

      set(value) {
        const vm = getAssociatedVM(this);
        /**
         * Reactivity for wired fields is provided in wiring.
         * We intentionally add reactivity here since this is just
         * letting the author to do the wrong thing, but it will keep our
         * system to be backward compatible.
         */

        if (value !== vm.cmpFields[key]) {
          vm.cmpFields[key] = value;
          componentValueMutated(vm, key);
        }
      },

      enumerable: true,
      configurable: true
    };
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function track(target) {
    if (arguments.length === 1) {
      return reactiveMembrane.getProxy(target);
    }

    throw new Error();
  }

  function internalTrackDecorator(key) {
    return {
      get() {
        const vm = getAssociatedVM(this);
        componentValueObserved(vm, key);
        return vm.cmpFields[key];
      },

      set(newValue) {
        const vm = getAssociatedVM(this);

        const reactiveOrAnyValue = reactiveMembrane.getProxy(newValue);

        if (reactiveOrAnyValue !== vm.cmpFields[key]) {
          vm.cmpFields[key] = reactiveOrAnyValue;
          componentValueMutated(vm, key);
        }
      },

      enumerable: true,
      configurable: true
    };
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function api$1() {

    throw new Error();
  }

  function createPublicPropertyDescriptor(key) {
    return {
      get() {
        const vm = getAssociatedVM(this);

        if (isBeingConstructed(vm)) {

          return;
        }

        componentValueObserved(vm, key);
        return vm.cmpProps[key];
      },

      set(newValue) {
        const vm = getAssociatedVM(this);

        vm.cmpProps[key] = newValue;
        componentValueMutated(vm, key);
      },

      enumerable: true,
      configurable: true
    };
  }

  class AccessorReactiveObserver extends ReactiveObserver {
    constructor(vm, set) {
      super(() => {
        if (isFalse(this.debouncing)) {
          this.debouncing = true;
          addCallbackToNextTick(() => {
            if (isTrue(this.debouncing)) {
              const {
                value
              } = this;
              const {
                isDirty: dirtyStateBeforeSetterCall,
                component,
                idx
              } = vm;
              set.call(component, value); // de-bouncing after the call to the original setter to prevent
              // infinity loop if the setter itself is mutating things that
              // were accessed during the previous invocation.

              this.debouncing = false;

              if (isTrue(vm.isDirty) && isFalse(dirtyStateBeforeSetterCall) && idx > 0) {
                // immediate rehydration due to a setter driven mutation, otherwise
                // the component will get rendered on the second tick, which it is not
                // desirable.
                rerenderVM(vm);
              }
            }
          });
        }
      });
      this.debouncing = false;
    }

    reset(value) {
      super.reset();
      this.debouncing = false;

      if (arguments.length > 0) {
        this.value = value;
      }
    }

  }

  function createPublicAccessorDescriptor(key, descriptor) {
    const {
      get,
      set,
      enumerable,
      configurable
    } = descriptor;

    if (!isFunction$1(get)) {

      throw new Error();
    }

    return {
      get() {

        return get.call(this);
      },

      set(newValue) {
        const vm = getAssociatedVM(this);

        if (set) {
          if (runtimeFlags.ENABLE_REACTIVE_SETTER) {
            let ro = vm.oar[key];

            if (isUndefined$1(ro)) {
              ro = vm.oar[key] = new AccessorReactiveObserver(vm, set);
            } // every time we invoke this setter from outside (through this wrapper setter)
            // we should reset the value and then debounce just in case there is a pending
            // invocation the next tick that is not longer relevant since the value is changing
            // from outside.


            ro.reset(newValue);
            ro.observe(() => {
              set.call(this, newValue);
            });
          } else {
            set.call(this, newValue);
          }
        }
      },

      enumerable,
      configurable
    };
  }

  function createObservedFieldPropertyDescriptor(key) {
    return {
      get() {
        const vm = getAssociatedVM(this);
        componentValueObserved(vm, key);
        return vm.cmpFields[key];
      },

      set(newValue) {
        const vm = getAssociatedVM(this);

        if (newValue !== vm.cmpFields[key]) {
          vm.cmpFields[key] = newValue;
          componentValueMutated(vm, key);
        }
      },

      enumerable: true,
      configurable: true
    };
  }
  /**
   * INTERNAL: This function can only be invoked by compiled code. The compiler
   * will prevent this function from being imported by user-land code.
   */


  function registerDecorators(Ctor, meta) {
    const proto = Ctor.prototype;
    const {
      publicProps,
      publicMethods,
      wire,
      track,
      fields
    } = meta;
    const apiMethods = create(null);
    const apiFields = create(null);
    const wiredMethods = create(null);
    const wiredFields = create(null);
    const observedFields = create(null);
    const apiFieldsConfig = create(null);
    let descriptor;

    if (!isUndefined$1(publicProps)) {
      for (const fieldName in publicProps) {
        const propConfig = publicProps[fieldName];
        apiFieldsConfig[fieldName] = propConfig.config;
        descriptor = getOwnPropertyDescriptor$1(proto, fieldName);

        if (propConfig.config > 0) {

          if (isUndefined$1(descriptor)) {
            throw new Error();
          }

          descriptor = createPublicAccessorDescriptor(fieldName, descriptor);
        } else {
          // with the same name, the property is defined as a public accessor. This branch is
          // only here for backward compatibility reasons.


          if (!isUndefined$1(descriptor) && !isUndefined$1(descriptor.get)) {
            descriptor = createPublicAccessorDescriptor(fieldName, descriptor);
          } else {
            descriptor = createPublicPropertyDescriptor(fieldName);
          }
        }

        apiFields[fieldName] = descriptor;
        defineProperty(proto, fieldName, descriptor);
      }
    }

    if (!isUndefined$1(publicMethods)) {
      forEach.call(publicMethods, methodName => {
        descriptor = getOwnPropertyDescriptor$1(proto, methodName);

        if (isUndefined$1(descriptor)) {
          throw new Error();
        }

        apiMethods[methodName] = descriptor;
      });
    }

    if (!isUndefined$1(wire)) {
      for (const fieldOrMethodName in wire) {
        const {
          adapter,
          method,
          config: configCallback,
          dynamic = []
        } = wire[fieldOrMethodName];
        descriptor = getOwnPropertyDescriptor$1(proto, fieldOrMethodName);

        if (method === 1) {

          if (isUndefined$1(descriptor)) {
            throw new Error();
          }

          wiredMethods[fieldOrMethodName] = descriptor;
          storeWiredMethodMeta(descriptor, adapter, configCallback, dynamic);
        } else {

          descriptor = internalWireFieldDecorator(fieldOrMethodName);
          wiredFields[fieldOrMethodName] = descriptor;
          storeWiredFieldMeta(descriptor, adapter, configCallback, dynamic);
          defineProperty(proto, fieldOrMethodName, descriptor);
        }
      }
    }

    if (!isUndefined$1(track)) {
      for (const fieldName in track) {
        descriptor = getOwnPropertyDescriptor$1(proto, fieldName);

        descriptor = internalTrackDecorator(fieldName);
        defineProperty(proto, fieldName, descriptor);
      }
    }

    if (!isUndefined$1(fields)) {
      for (let i = 0, n = fields.length; i < n; i++) {
        const fieldName = fields[i];
        descriptor = getOwnPropertyDescriptor$1(proto, fieldName);
        // tracked property. This is only here for backward compatibility purposes.


        const isDuplicatePublicProp = !isUndefined$1(publicProps) && fieldName in publicProps;
        const isDuplicateTrackedProp = !isUndefined$1(track) && fieldName in track;

        if (!isDuplicatePublicProp && !isDuplicateTrackedProp) {
          observedFields[fieldName] = createObservedFieldPropertyDescriptor(fieldName);
        }
      }
    }

    setDecoratorsMeta(Ctor, {
      apiMethods,
      apiFields,
      apiFieldsConfig,
      wiredMethods,
      wiredFields,
      observedFields
    });
    return Ctor;
  }

  const signedDecoratorToMetaMap = new Map();

  function setDecoratorsMeta(Ctor, meta) {
    signedDecoratorToMetaMap.set(Ctor, meta);
  }

  const defaultMeta = {
    apiMethods: EmptyObject,
    apiFields: EmptyObject,
    apiFieldsConfig: EmptyObject,
    wiredMethods: EmptyObject,
    wiredFields: EmptyObject,
    observedFields: EmptyObject
  };

  function getDecoratorsMeta(Ctor) {
    const meta = signedDecoratorToMetaMap.get(Ctor);
    return isUndefined$1(meta) ? defaultMeta : meta;
  }

  const signedTemplateSet = new Set();

  function defaultEmptyTemplate() {
    return [];
  }

  signedTemplateSet.add(defaultEmptyTemplate);

  function isTemplateRegistered(tpl) {
    return signedTemplateSet.has(tpl);
  }
  /**
   * INTERNAL: This function can only be invoked by compiled code. The compiler
   * will prevent this function from being imported by userland code.
   */


  function registerTemplate(tpl) {
    signedTemplateSet.add(tpl); // chaining this method as a way to wrap existing
    // assignment of templates easily, without too much transformation

    return tpl;
  }
  /**
   * EXPERIMENTAL: This function acts like a hook for Lightning Locker
   * Service and other similar libraries to sanitize vulnerable attributes.
   * This API is subject to change or being removed.
   */


  function sanitizeAttribute(tagName, namespaceUri, attrName, attrValue) {
    // locker-service patches this function during runtime to sanitize vulnerable attributes.
    // when ran off-core this function becomes a noop and returns the user authored value.
    return attrValue;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  // from the element instance, and get the value or set a new value on the component.
  // This means that across different elements, similar names can get the exact same
  // descriptor, so we can cache them:


  const cachedGetterByKey = create(null);
  const cachedSetterByKey = create(null);

  function createGetter(key) {
    let fn = cachedGetterByKey[key];

    if (isUndefined$1(fn)) {
      fn = cachedGetterByKey[key] = function () {
        const vm = getAssociatedVM(this);
        const {
          getHook
        } = vm;
        return getHook(vm.component, key);
      };
    }

    return fn;
  }

  function createSetter(key) {
    let fn = cachedSetterByKey[key];

    if (isUndefined$1(fn)) {
      fn = cachedSetterByKey[key] = function (newValue) {
        const vm = getAssociatedVM(this);
        const {
          setHook
        } = vm;
        newValue = reactiveMembrane.getReadOnlyProxy(newValue);
        setHook(vm.component, key, newValue);
      };
    }

    return fn;
  }

  function createMethodCaller(methodName) {
    return function () {
      const vm = getAssociatedVM(this);
      const {
        callHook,
        component
      } = vm;
      const fn = component[methodName];
      return callHook(vm.component, fn, ArraySlice.call(arguments));
    };
  }

  function createAttributeChangedCallback(attributeToPropMap, superAttributeChangedCallback) {
    return function attributeChangedCallback(attrName, oldValue, newValue) {
      if (oldValue === newValue) {
        // Ignore same values.
        return;
      }

      const propName = attributeToPropMap[attrName];

      if (isUndefined$1(propName)) {
        if (!isUndefined$1(superAttributeChangedCallback)) {
          // delegate unknown attributes to the super.
          // Typescript does not like it when you treat the `arguments` object as an array
          // @ts-ignore type-mismatch
          superAttributeChangedCallback.apply(this, arguments);
        }

        return;
      }

      if (!isAttributeLocked(this, attrName)) {
        // Ignore changes triggered by the engine itself during:
        // * diffing when public props are attempting to reflect to the DOM
        // * component via `this.setAttribute()`, should never update the prop
        // Both cases, the setAttribute call is always wrapped by the unlocking of the
        // attribute to be changed
        return;
      } // Reflect attribute change to the corresponding property when changed from outside.


      this[propName] = newValue;
    };
  }

  function HTMLBridgeElementFactory(SuperClass, props, methods) {
    let HTMLBridgeElement;
    /**
     * Modern browsers will have all Native Constructors as regular Classes
     * and must be instantiated with the new keyword. In older browsers,
     * specifically IE11, those are objects with a prototype property defined,
     * since they are not supposed to be extended or instantiated with the
     * new keyword. This forking logic supports both cases, specifically because
     * wc.ts relies on the construction path of the bridges to create new
     * fully qualifying web components.
     */

    if (isFunction$1(SuperClass)) {
      HTMLBridgeElement = class extends SuperClass {};
    } else {
      HTMLBridgeElement = function () {
        // Bridge classes are not supposed to be instantiated directly in
        // browsers that do not support web components.
        throw new TypeError('Illegal constructor');
      }; // prototype inheritance dance


      setPrototypeOf(HTMLBridgeElement, SuperClass);
      setPrototypeOf(HTMLBridgeElement.prototype, SuperClass.prototype);
      defineProperty(HTMLBridgeElement.prototype, 'constructor', {
        writable: true,
        configurable: true,
        value: HTMLBridgeElement
      });
    } // generating the hash table for attributes to avoid duplicate fields and facilitate validation
    // and false positives in case of inheritance.


    const attributeToPropMap = create(null);
    const {
      attributeChangedCallback: superAttributeChangedCallback
    } = SuperClass.prototype;
    const {
      observedAttributes: superObservedAttributes = []
    } = SuperClass;
    const descriptors = create(null); // expose getters and setters for each public props on the new Element Bridge

    for (let i = 0, len = props.length; i < len; i += 1) {
      const propName = props[i];
      attributeToPropMap[htmlPropertyToAttribute(propName)] = propName;
      descriptors[propName] = {
        get: createGetter(propName),
        set: createSetter(propName),
        enumerable: true,
        configurable: true
      };
    } // expose public methods as props on the new Element Bridge


    for (let i = 0, len = methods.length; i < len; i += 1) {
      const methodName = methods[i];
      descriptors[methodName] = {
        value: createMethodCaller(methodName),
        writable: true,
        configurable: true
      };
    } // creating a new attributeChangedCallback per bridge because they are bound to the corresponding
    // map of attributes to props. We do this after all other props and methods to avoid the possibility
    // of getting overrule by a class declaration in user-land, and we make it non-writable, non-configurable
    // to preserve this definition.


    descriptors.attributeChangedCallback = {
      value: createAttributeChangedCallback(attributeToPropMap, superAttributeChangedCallback)
    }; // Specify attributes for which we want to reflect changes back to their corresponding
    // properties via attributeChangedCallback.

    defineProperty(HTMLBridgeElement, 'observedAttributes', {
      get() {
        return [...superObservedAttributes, ...keys(attributeToPropMap)];
      }

    });
    defineProperties(HTMLBridgeElement.prototype, descriptors);
    return HTMLBridgeElement;
  }

  const BaseBridgeElement = HTMLBridgeElementFactory(HTMLElementConstructor$1, getOwnPropertyNames$1(HTMLElementOriginalDescriptors), []);
  freeze(BaseBridgeElement);
  seal(BaseBridgeElement.prototype);
  /*
   * Copyright (c) 2020, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  function resolveCircularModuleDependency(fn) {
    const module = fn();
    return (module === null || module === void 0 ? void 0 : module.__esModule) ? module.default : module;
  }

  function isCircularModuleDependency(obj) {
    return isFunction$1(obj) && hasOwnProperty$1.call(obj, '__circular__');
  }

  function setActiveVM(vm) {
    {
      // this method should never leak to prod
      throw new ReferenceError();
    }
  }

  function swapTemplate(oldTpl, newTpl) {

    if (!runtimeFlags.ENABLE_HMR) {
      throw new Error('HMR is not enabled');
    }

    return false;
  }

  function swapComponent(oldComponent, newComponent) {

    if (!runtimeFlags.ENABLE_HMR) {
      throw new Error('HMR is not enabled');
    }

    return false;
  }

  function swapStyle(oldStyle, newStyle) {

    if (!runtimeFlags.ENABLE_HMR) {
      throw new Error('HMR is not enabled');
    }

    return false;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const CtorToDefMap = new WeakMap();

  function getCtorProto(Ctor) {
    let proto = getPrototypeOf$1(Ctor);

    if (isNull(proto)) {
      throw new ReferenceError(`Invalid prototype chain for ${Ctor.name}, you must extend LightningElement.`);
    } // covering the cases where the ref is circular in AMD


    if (isCircularModuleDependency(proto)) {
      const p = resolveCircularModuleDependency(proto);
      // of our Base class without having to leak it to user-land. If the circular function returns
      // itself, that's the signal that we have hit the end of the proto chain, which must always
      // be base.


      proto = p === proto ? LightningElement : p;
    }

    return proto;
  }

  function createComponentDef(Ctor) {
    const {
      shadowSupportMode: ctorShadowSupportMode,
      renderMode: ctorRenderMode
    } = Ctor;

    const decoratorsMeta = getDecoratorsMeta(Ctor);
    const {
      apiFields,
      apiFieldsConfig,
      apiMethods,
      wiredFields,
      wiredMethods,
      observedFields
    } = decoratorsMeta;
    const proto = Ctor.prototype;
    let {
      connectedCallback,
      disconnectedCallback,
      renderedCallback,
      errorCallback,
      render
    } = proto;
    const superProto = getCtorProto(Ctor);
    const superDef = superProto !== LightningElement ? getComponentInternalDef(superProto) : lightingElementDef;
    const bridge = HTMLBridgeElementFactory(superDef.bridge, keys(apiFields), keys(apiMethods));
    const props = assign(create(null), superDef.props, apiFields);
    const propsConfig = assign(create(null), superDef.propsConfig, apiFieldsConfig);
    const methods = assign(create(null), superDef.methods, apiMethods);
    const wire = assign(create(null), superDef.wire, wiredFields, wiredMethods);
    connectedCallback = connectedCallback || superDef.connectedCallback;
    disconnectedCallback = disconnectedCallback || superDef.disconnectedCallback;
    renderedCallback = renderedCallback || superDef.renderedCallback;
    errorCallback = errorCallback || superDef.errorCallback;
    render = render || superDef.render;
    let shadowSupportMode = superDef.shadowSupportMode;

    if (!isUndefined$1(ctorShadowSupportMode)) {
      shadowSupportMode = ctorShadowSupportMode;
    }

    let renderMode = superDef.renderMode;

    if (!isUndefined$1(ctorRenderMode)) {
      renderMode = ctorRenderMode === 'light' ? 0
      /* Light */
      : 1
      /* Shadow */
      ;
    }

    const template = getComponentRegisteredTemplate(Ctor) || superDef.template;
    const name = Ctor.name || superDef.name; // installing observed fields into the prototype.

    defineProperties(proto, observedFields);
    const def = {
      ctor: Ctor,
      name,
      wire,
      props,
      propsConfig,
      methods,
      bridge,
      template,
      renderMode,
      shadowSupportMode,
      connectedCallback,
      disconnectedCallback,
      renderedCallback,
      errorCallback,
      render
    };

    return def;
  }
  /**
   * EXPERIMENTAL: This function allows for the identification of LWC constructors. This API is
   * subject to change or being removed.
   */


  function isComponentConstructor(ctor) {
    if (!isFunction$1(ctor)) {
      return false;
    } // Fast path: LightningElement is part of the prototype chain of the constructor.


    if (ctor.prototype instanceof LightningElement) {
      return true;
    } // Slow path: LightningElement is not part of the prototype chain of the constructor, we need
    // climb up the constructor prototype chain to check in case there are circular dependencies
    // to resolve.


    let current = ctor;

    do {
      if (isCircularModuleDependency(current)) {
        const circularResolved = resolveCircularModuleDependency(current); // If the circular function returns itself, that's the signal that we have hit the end
        // of the proto chain, which must always be a valid base constructor.

        if (circularResolved === current) {
          return true;
        }

        current = circularResolved;
      }

      if (current === LightningElement) {
        return true;
      }
    } while (!isNull(current) && (current = getPrototypeOf$1(current))); // Finally return false if the LightningElement is not part of the prototype chain.


    return false;
  }

  function getComponentInternalDef(Ctor) {

    let def = CtorToDefMap.get(Ctor);

    if (isUndefined$1(def)) {
      if (isCircularModuleDependency(Ctor)) {
        const resolvedCtor = resolveCircularModuleDependency(Ctor);
        def = getComponentInternalDef(resolvedCtor); // Cache the unresolved component ctor too. The next time if the same unresolved ctor is used,
        // look up the definition in cache instead of re-resolving and recreating the def.

        CtorToDefMap.set(Ctor, def);
        return def;
      }

      if (!isComponentConstructor(Ctor)) {
        throw new TypeError(`${Ctor} is not a valid component, or does not extends LightningElement from "lwc". You probably forgot to add the extend clause on the class declaration.`);
      }

      def = createComponentDef(Ctor);
      CtorToDefMap.set(Ctor, def);
    }

    return def;
  }

  const lightingElementDef = {
    ctor: LightningElement,
    name: LightningElement.name,
    props: lightningBasedDescriptors,
    propsConfig: EmptyObject,
    methods: EmptyObject,
    renderMode: 1
    /* Shadow */
    ,
    shadowSupportMode: "default"
    /* Default */
    ,
    wire: EmptyObject,
    bridge: BaseBridgeElement,
    template: defaultEmptyTemplate,
    render: LightningElement.prototype.render
  };
  /**
   * EXPERIMENTAL: This function allows for the collection of internal component metadata. This API is
   * subject to change or being removed.
   */

  function getComponentDef(Ctor) {
    const def = getComponentInternalDef(Ctor); // From the internal def object, we need to extract the info that is useful
    // for some external services, e.g.: Locker Service, usually, all they care
    // is about the shape of the constructor, the internals of it are not relevant
    // because they don't have a way to mess with that.

    const {
      ctor,
      name,
      props,
      propsConfig,
      methods
    } = def;
    const publicProps = {};

    for (const key in props) {
      // avoid leaking the reference to the public props descriptors
      publicProps[key] = {
        config: propsConfig[key] || 0,
        type: "any"
        /* any */
        ,
        attr: htmlPropertyToAttribute(key)
      };
    }

    const publicMethods = {};

    for (const key in methods) {
      // avoid leaking the reference to the public method descriptors
      publicMethods[key] = methods[key].value;
    }

    return {
      ctor,
      name,
      props: publicProps,
      methods: publicMethods
    };
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function observeElementChildNodes(elm) {
    elm.$domManual$ = true;
  }

  function setElementShadowToken(elm, token) {
    elm.$shadowToken$ = token;
  } // Set the scope token class for *.scoped.css styles


  function setScopeTokenClassIfNecessary(elm, owner) {
    const {
      cmpTemplate,
      context
    } = owner;
    const token = cmpTemplate === null || cmpTemplate === void 0 ? void 0 : cmpTemplate.stylesheetToken;

    if (!isUndefined$1(token) && context.hasScopedStyles) {
      owner.renderer.getClassList(elm).add(token);
    }
  }

  function updateNodeHook(oldVnode, vnode) {
    const {
      elm,
      text,
      owner: {
        renderer
      }
    } = vnode;

    if (oldVnode.text !== text) {

      renderer.setText(elm, text);
    }
  }

  function insertNodeHook(vnode, parentNode, referenceNode) {
    const {
      renderer
    } = vnode.owner;

    renderer.insert(vnode.elm, parentNode, referenceNode);
  }

  function removeNodeHook(vnode, parentNode) {
    const {
      renderer
    } = vnode.owner;

    renderer.remove(vnode.elm, parentNode);
  }

  function createElmHook(vnode) {
    modEvents.create(vnode); // Attrs need to be applied to element before props
    // IE11 will wipe out value on radio inputs if value
    // is set before type=radio.

    modAttrs.create(vnode);
    modProps.create(vnode);
    modStaticClassName.create(vnode);
    modStaticStyle.create(vnode);
    modComputedClassName.create(vnode);
    modComputedStyle.create(vnode);
  }

  function fallbackElmHook(elm, vnode) {
    const {
      owner
    } = vnode;
    setScopeTokenClassIfNecessary(elm, owner);

    if (owner.shadowMode === 1
    /* Synthetic */
    ) {
      const {
        data: {
          context
        }
      } = vnode;
      const {
        stylesheetToken
      } = owner.context;

      if (!isUndefined$1(context) && !isUndefined$1(context.lwc) && context.lwc.dom === "manual"
      /* manual */
      ) {
        // this element will now accept any manual content inserted into it
        observeElementChildNodes(elm);
      } // when running in synthetic shadow mode, we need to set the shadowToken value
      // into each element from the template, so they can be styled accordingly.


      setElementShadowToken(elm, stylesheetToken);
    }
  }

  function updateElmHook(oldVnode, vnode) {
    // Attrs need to be applied to element before props
    // IE11 will wipe out value on radio inputs if value
    // is set before type=radio.
    modAttrs.update(oldVnode, vnode);
    modProps.update(oldVnode, vnode);
    modComputedClassName.update(oldVnode, vnode);
    modComputedStyle.update(oldVnode, vnode);
  }

  function updateChildrenHook(oldVnode, vnode) {
    const {
      children,
      owner
    } = vnode;
    const fn = hasDynamicChildren(children) ? updateDynamicChildren : updateStaticChildren;
    runWithBoundaryProtection(owner, owner.owner, noop, () => {
      fn(vnode.elm, oldVnode.children, children);
    }, noop);
  }

  function allocateChildrenHook(vnode, vm) {
    // A component with slots will re-render because:
    // 1- There is a change of the internal state.
    // 2- There is a change on the external api (ex: slots)
    //
    // In case #1, the vnodes in the cmpSlots will be reused since they didn't changed. This routine emptied the
    // slotted children when those VCustomElement were rendered and therefore in subsequent calls to allocate children
    // in a reused VCustomElement, there won't be any slotted children.
    // For those cases, we will use the reference for allocated children stored when rendering the fresh VCustomElement.
    //
    // In case #2, we will always get a fresh VCustomElement.
    const children = vnode.aChildren || vnode.children;
    vm.aChildren = children;
    const {
      renderMode,
      shadowMode
    } = vm;

    if (shadowMode === 1
    /* Synthetic */
    || renderMode === 0
    /* Light */
    ) {
      // slow path
      allocateInSlot(vm, children); // save the allocated children in case this vnode is reused.

      vnode.aChildren = children; // every child vnode is now allocated, and the host should receive none directly, it receives them via the shadow!

      vnode.children = EmptyArray;
    }
  }

  function createViewModelHook(elm, vnode) {
    if (!isUndefined$1(getAssociatedVMIfPresent(elm))) {
      // There is a possibility that a custom element is registered under tagName,
      // in which case, the initialization is already carry on, and there is nothing else
      // to do here since this hook is called right after invoking `document.createElement`.
      return;
    }

    const {
      sel,
      mode,
      ctor,
      owner
    } = vnode;
    setScopeTokenClassIfNecessary(elm, owner);

    if (owner.shadowMode === 1
    /* Synthetic */
    ) {
      const {
        stylesheetToken
      } = owner.context; // when running in synthetic shadow mode, we need to set the shadowToken value
      // into each element from the template, so they can be styled accordingly.

      setElementShadowToken(elm, stylesheetToken);
    }

    const def = getComponentInternalDef(ctor);
    createVM(elm, def, {
      mode,
      owner,
      tagName: sel,
      renderer: owner.renderer
    });
  }

  function createCustomElmHook(vnode) {
    modEvents.create(vnode); // Attrs need to be applied to element before props
    // IE11 will wipe out value on radio inputs if value
    // is set before type=radio.

    modAttrs.create(vnode);
    modProps.create(vnode);
    modStaticClassName.create(vnode);
    modStaticStyle.create(vnode);
    modComputedClassName.create(vnode);
    modComputedStyle.create(vnode);
  }

  function createChildrenHook(vnode) {
    const {
      elm,
      children
    } = vnode;

    for (let j = 0; j < children.length; ++j) {
      const ch = children[j];

      if (ch != null) {
        ch.hook.create(ch);
        ch.hook.insert(ch, elm, null);
      }
    }
  }

  function updateCustomElmHook(oldVnode, vnode) {
    // Attrs need to be applied to element before props
    // IE11 will wipe out value on radio inputs if value
    // is set before type=radio.
    modAttrs.update(oldVnode, vnode);
    modProps.update(oldVnode, vnode);
    modComputedClassName.update(oldVnode, vnode);
    modComputedStyle.update(oldVnode, vnode);
  }

  function removeElmHook(vnode) {
    // this method only needs to search on child vnodes from template
    // to trigger the remove hook just in case some of those children
    // are custom elements.
    const {
      children,
      elm
    } = vnode;

    for (let j = 0, len = children.length; j < len; ++j) {
      const ch = children[j];

      if (!isNull(ch)) {
        ch.hook.remove(ch, elm);
      }
    }
  } // Using a WeakMap instead of a WeakSet because this one works in IE11 :(


  const FromIteration = new WeakMap(); // dynamic children means it was generated by an iteration
  // in a template, and will require a more complex diffing algo.

  function markAsDynamicChildren(children) {
    FromIteration.set(children, 1);
  }

  function hasDynamicChildren(children) {
    return FromIteration.has(children);
  }
  /*
   * Copyright (c) 2020, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function getUpgradableConstructor(tagName, renderer) {
    // Should never get a tag with upper case letter at this point, the compiler should
    // produce only tags with lowercase letters
    // But, for backwards compatibility, we will lower case the tagName
    tagName = tagName.toLowerCase();
    let CE = renderer.getCustomElement(tagName);

    if (!isUndefined$1(CE)) {
      return CE;
    }
    /**
     * LWC Upgradable Element reference to an element that was created
     * via the scoped registry mechanism, and that is ready to be upgraded.
     */


    CE = class LWCUpgradableElement extends renderer.HTMLElement {
      constructor(upgradeCallback) {
        super();

        if (isFunction$1(upgradeCallback)) {
          upgradeCallback(this); // nothing to do with the result for now
        }
      }

    };
    renderer.defineCustomElement(tagName, CE);
    return CE;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  const SymbolIterator = Symbol.iterator;
  const TextHook = {
    create: vnode => {
      const {
        owner
      } = vnode;
      const {
        renderer
      } = owner;
      const elm = renderer.createText(vnode.text);
      linkNodeToShadow(elm, owner);
      vnode.elm = elm;
    },
    update: updateNodeHook,
    insert: insertNodeHook,
    move: insertNodeHook,
    remove: removeNodeHook
  };
  const CommentHook = {
    create: vnode => {
      const {
        owner,
        text
      } = vnode;
      const {
        renderer
      } = owner;
      const elm = renderer.createComment(text);
      linkNodeToShadow(elm, owner);
      vnode.elm = elm;
    },
    update: updateNodeHook,
    insert: insertNodeHook,
    move: insertNodeHook,
    remove: removeNodeHook
  }; // insert is called after update, which is used somewhere else (via a module)
  // to mark the vm as inserted, that means we cannot use update as the main channel
  // to rehydrate when dirty, because sometimes the element is not inserted just yet,
  // which breaks some invariants. For that reason, we have the following for any
  // Custom Element that is inserted via a template.

  const ElementHook = {
    create: vnode => {
      const {
        sel,
        owner,
        data: {
          svg
        }
      } = vnode;
      const {
        renderer
      } = owner;
      const namespace = isTrue(svg) ? SVG_NAMESPACE : undefined;
      const elm = renderer.createElement(sel, namespace);
      linkNodeToShadow(elm, owner);
      fallbackElmHook(elm, vnode);
      vnode.elm = elm;
      createElmHook(vnode);
    },
    update: (oldVnode, vnode) => {
      updateElmHook(oldVnode, vnode);
      updateChildrenHook(oldVnode, vnode);
    },
    insert: (vnode, parentNode, referenceNode) => {
      insertNodeHook(vnode, parentNode, referenceNode);
      createChildrenHook(vnode);
    },
    move: (vnode, parentNode, referenceNode) => {
      insertNodeHook(vnode, parentNode, referenceNode);
    },
    remove: (vnode, parentNode) => {
      removeNodeHook(vnode, parentNode);
      removeElmHook(vnode);
    }
  };
  const CustomElementHook = {
    create: vnode => {
      const {
        sel,
        owner
      } = vnode;
      const {
        renderer
      } = owner;
      const UpgradableConstructor = getUpgradableConstructor(sel, renderer);
      /**
       * Note: if the upgradable constructor does not expect, or throw when we new it
       * with a callback as the first argument, we could implement a more advanced
       * mechanism that only passes that argument if the constructor is known to be
       * an upgradable custom element.
       */

      const elm = new UpgradableConstructor(elm => {
        // the custom element from the registry is expecting an upgrade callback
        createViewModelHook(elm, vnode);
      });
      linkNodeToShadow(elm, owner);
      vnode.elm = elm;
      const vm = getAssociatedVMIfPresent(elm);

      if (vm) {
        allocateChildrenHook(vnode, vm);
      } else if (vnode.ctor !== UpgradableConstructor) {
        throw new TypeError(`Incorrect Component Constructor`);
      }

      createCustomElmHook(vnode);
    },
    update: (oldVnode, vnode) => {
      updateCustomElmHook(oldVnode, vnode);
      const vm = getAssociatedVMIfPresent(vnode.elm);

      if (vm) {
        // in fallback mode, the allocation will always set children to
        // empty and delegate the real allocation to the slot elements
        allocateChildrenHook(vnode, vm);
      } // in fallback mode, the children will be always empty, so, nothing
      // will happen, but in native, it does allocate the light dom


      updateChildrenHook(oldVnode, vnode);

      if (vm) {
        // this is important to preserve the top to bottom synchronous rendering phase.


        rerenderVM(vm);
      }
    },
    insert: (vnode, parentNode, referenceNode) => {
      insertNodeHook(vnode, parentNode, referenceNode);
      const vm = getAssociatedVMIfPresent(vnode.elm);

      if (vm) {

        runConnectedCallback(vm);
      }

      createChildrenHook(vnode);

      if (vm) {
        appendVM(vm);
      }
    },
    move: (vnode, parentNode, referenceNode) => {
      insertNodeHook(vnode, parentNode, referenceNode);
    },
    remove: (vnode, parentNode) => {
      removeNodeHook(vnode, parentNode);
      const vm = getAssociatedVMIfPresent(vnode.elm);

      if (vm) {
        // for custom elements we don't have to go recursively because the removeVM routine
        // will take care of disconnecting any child VM attached to its shadow as well.
        removeVM(vm);
      }
    }
  };

  function linkNodeToShadow(elm, owner) {
    const {
      renderer,
      renderMode,
      shadowMode
    } = owner; // TODO [#1164]: this should eventually be done by the polyfill directly

    if (renderer.isSyntheticShadowDefined) {
      if (shadowMode === 1
      /* Synthetic */
      || renderMode === 0
      /* Light */
      ) {
        elm[KEY__SHADOW_RESOLVER] = getRenderRoot(owner)[KEY__SHADOW_RESOLVER];
      }
    }
  }

  function addVNodeToChildLWC(vnode) {
    ArrayPush$1.call(getVMBeingRendered().velements, vnode);
  } // [h]tml node


  function h(sel, data, children) {
    const vmBeingRendered = getVMBeingRendered();

    let text, elm;
    const {
      key
    } = data;
    return {
      sel,
      data,
      children,
      text,
      elm,
      key,
      hook: ElementHook,
      owner: vmBeingRendered
    };
  } // [t]ab[i]ndex function


  function ti(value) {
    // if value is greater than 0, we normalize to 0
    // If value is an invalid tabIndex value (null, undefined, string, etc), we let that value pass through
    // If value is less than -1, we don't care
    const shouldNormalize = value > 0 && !(isTrue(value) || isFalse(value));

    return shouldNormalize ? 0 : value;
  } // [s]lot element node


  function s(slotName, data, children, slotset) {

    if (!isUndefined$1(slotset) && !isUndefined$1(slotset[slotName]) && slotset[slotName].length !== 0) {
      children = slotset[slotName];
    }

    const vmBeingRendered = getVMBeingRendered();
    const {
      renderMode,
      shadowMode
    } = vmBeingRendered;

    if (renderMode === 0
    /* Light */
    ) {
      sc(children);
      return children;
    }

    if (shadowMode === 1
    /* Synthetic */
    ) {
      // TODO [#1276]: compiler should give us some sort of indicator when a vnodes collection is dynamic
      sc(children);
    }

    return h('slot', data, children);
  } // [c]ustom element node


  function c(sel, Ctor, data, children = EmptyArray) {
    const vmBeingRendered = getVMBeingRendered();

    const {
      key
    } = data;
    let text, elm;
    const vnode = {
      sel,
      data,
      children,
      text,
      elm,
      key,
      hook: CustomElementHook,
      ctor: Ctor,
      owner: vmBeingRendered,
      mode: 'open' // TODO [#1294]: this should be defined in Ctor

    };
    addVNodeToChildLWC(vnode);
    return vnode;
  } // [i]terable node


  function i(iterable, factory) {
    const list = []; // TODO [#1276]: compiler should give us some sort of indicator when a vnodes collection is dynamic

    sc(list);

    if (isUndefined$1(iterable) || iterable === null) {

      return list;
    }

    const iterator = iterable[SymbolIterator]();

    let next = iterator.next();
    let j = 0;
    let {
      value,
      done: last
    } = next;

    while (last === false) {
      // implementing a look-back-approach because we need to know if the element is the last
      next = iterator.next();
      last = next.done; // template factory logic based on the previous collected value

      const vnode = factory(value, j, j === 0, last);

      if (isArray$1(vnode)) {
        ArrayPush$1.apply(list, vnode);
      } else {
        ArrayPush$1.call(list, vnode);
      }


      j += 1;
      value = next.value;
    }

    return list;
  }
  /**
   * [f]lattening
   */


  function f(items) {

    const len = items.length;
    const flattened = []; // TODO [#1276]: compiler should give us some sort of indicator when a vnodes collection is dynamic

    sc(flattened);

    for (let j = 0; j < len; j += 1) {
      const item = items[j];

      if (isArray$1(item)) {
        ArrayPush$1.apply(flattened, item);
      } else {
        ArrayPush$1.call(flattened, item);
      }
    }

    return flattened;
  } // [t]ext node


  function t(text) {
    const data = EmptyObject;
    let sel, children, key, elm;
    return {
      sel,
      data,
      children,
      text,
      elm,
      key,
      hook: TextHook,
      owner: getVMBeingRendered()
    };
  } // [co]mment node


  function co(text) {
    const data = EmptyObject;
    let sel, children, key, elm;
    return {
      sel,
      data,
      children,
      text,
      elm,
      key,
      hook: CommentHook,
      owner: getVMBeingRendered()
    };
  } // [d]ynamic text


  function d(value) {
    return value == null ? '' : value;
  } // [b]ind function


  function b(fn) {
    const vmBeingRendered = getVMBeingRendered();

    if (isNull(vmBeingRendered)) {
      throw new Error();
    }

    const vm = vmBeingRendered;
    return function (event) {
      invokeEventListener(vm, fn, vm.component, event);
    };
  } // [k]ey function


  function k(compilerKey, obj) {
    switch (typeof obj) {
      case 'number':
      case 'string':
        return compilerKey + ':' + obj;

    }
  } // [g]lobal [id] function


  function gid(id) {
    const vmBeingRendered = getVMBeingRendered();

    if (isUndefined$1(id) || id === '') {

      return id;
    } // We remove attributes when they are assigned a value of null


    if (isNull(id)) {
      return null;
    }

    const {
      idx,
      shadowMode
    } = vmBeingRendered;

    if (shadowMode === 1
    /* Synthetic */
    ) {
      return StringReplace.call(id, /\S+/g, id => `${id}-${idx}`);
    }

    return id;
  } // [f]ragment [id] function


  function fid(url) {
    const vmBeingRendered = getVMBeingRendered();

    if (isUndefined$1(url) || url === '') {

      return url;
    } // We remove attributes when they are assigned a value of null


    if (isNull(url)) {
      return null;
    }

    const {
      idx,
      shadowMode
    } = vmBeingRendered; // Apply transformation only for fragment-only-urls, and only in shadow DOM

    if (shadowMode === 1
    /* Synthetic */
    && /^#/.test(url)) {
      return `${url}-${idx}`;
    }

    return url;
  }
  /**
   * Map to store an index value assigned to any dynamic component reference ingested
   * by dc() api. This allows us to generate a unique unique per template per dynamic
   * component reference to avoid diffing algo mismatches.
   */


  const DynamicImportedComponentMap = new Map();
  let dynamicImportedComponentCounter = 0;
  /**
   * create a dynamic component via `<x-foo lwc:dynamic={Ctor}>`
   */

  function dc(sel, Ctor, data, children) {


    if (Ctor == null) {
      return null;
    }

    if (!isComponentConstructor(Ctor)) {
      throw new Error(`Invalid LWC Constructor ${toString$1(Ctor)} for custom element <${sel}>.`);
    }

    let idx = DynamicImportedComponentMap.get(Ctor);

    if (isUndefined$1(idx)) {
      idx = dynamicImportedComponentCounter++;
      DynamicImportedComponentMap.set(Ctor, idx);
    } // the new vnode key is a mix of idx and compiler key, this is required by the diffing algo
    // to identify different constructors as vnodes with different keys to avoid reusing the
    // element used for previous constructors.


    data.key = `dc:${idx}:${data.key}`;
    return c(sel, Ctor, data, children);
  }
  /**
   * slow children collection marking mechanism. this API allows the compiler to signal
   * to the engine that a particular collection of children must be diffed using the slow
   * algo based on keys due to the nature of the list. E.g.:
   *
   *   - slot element's children: the content of the slot has to be dynamic when in synthetic
   *                              shadow mode because the `vnode.children` might be the slotted
   *                              content vs default content, in which case the size and the
   *                              keys are not matching.
   *   - children that contain dynamic components
   *   - children that are produced by iteration
   *
   */


  function sc(vnodes) {
    // choose to use the snabbdom virtual dom diffing algo instead of our
    // static dummy algo.


    markAsDynamicChildren(vnodes);
    return vnodes;
  }

  var api = /*#__PURE__*/Object.freeze({
    __proto__: null,
    h: h,
    ti: ti,
    s: s,
    c: c,
    i: i,
    f: f,
    t: t,
    co: co,
    d: d,
    b: b,
    k: k,
    gid: gid,
    fid: fid,
    dc: dc,
    sc: sc
  });
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  function makeHostToken(token) {
    return `${token}-host`;
  }

  function createInlineStyleVNode(content) {
    return h('style', {
      key: 'style',
      attrs: {
        type: 'text/css'
      }
    }, [t(content)]);
  }

  function updateStylesheetToken(vm, template) {
    const {
      elm,
      context,
      renderer,
      renderMode,
      shadowMode
    } = vm;
    const {
      stylesheets: newStylesheets,
      stylesheetToken: newStylesheetToken
    } = template;
    const isSyntheticShadow = renderMode === 1
    /* Shadow */
    && shadowMode === 1
    /* Synthetic */
    ;
    const {
      hasScopedStyles
    } = context;
    let newToken;
    let newHasTokenInClass;
    let newHasTokenInAttribute; // Reset the styling token applied to the host element.

    const {
      stylesheetToken: oldToken,
      hasTokenInClass: oldHasTokenInClass,
      hasTokenInAttribute: oldHasTokenInAttribute
    } = context;

    if (oldHasTokenInClass) {
      renderer.getClassList(elm).remove(makeHostToken(oldToken));
    }

    if (oldHasTokenInAttribute) {
      renderer.removeAttribute(elm, makeHostToken(oldToken));
    } // Apply the new template styling token to the host element, if the new template has any
    // associated stylesheets. In the case of light DOM, also ensure there is at least one scoped stylesheet.


    if (!isUndefined$1(newStylesheets) && newStylesheets.length !== 0) {
      newToken = newStylesheetToken;
    } // Set the new styling token on the host element


    if (!isUndefined$1(newToken)) {
      if (hasScopedStyles) {
        renderer.getClassList(elm).add(makeHostToken(newToken));
        newHasTokenInClass = true;
      }

      if (isSyntheticShadow) {
        renderer.setAttribute(elm, makeHostToken(newToken), '');
        newHasTokenInAttribute = true;
      }
    } // Update the styling tokens present on the context object.


    context.stylesheetToken = newToken;
    context.hasTokenInClass = newHasTokenInClass;
    context.hasTokenInAttribute = newHasTokenInAttribute;
  }

  function evaluateStylesheetsContent(stylesheets, stylesheetToken, vm) {
    const content = [];

    for (let i = 0; i < stylesheets.length; i++) {
      let stylesheet = stylesheets[i];

      if (isArray$1(stylesheet)) {
        ArrayPush$1.apply(content, evaluateStylesheetsContent(stylesheet, stylesheetToken, vm));
      } else {
        // native shadow DOM. Synthetic shadow DOM never uses `:host`.


        const isScopedCss = stylesheet[KEY__SCOPED_CSS];
        const useActualHostSelector = vm.renderMode === 0
        /* Light */
        ? !isScopedCss : vm.shadowMode === 0
        /* Native */
        ; // Apply the scope token only if the stylesheet itself is scoped, or if we're rendering synthetic shadow.

        const scopeToken = isScopedCss || vm.shadowMode === 1
        /* Synthetic */
        && vm.renderMode === 1
        /* Shadow */
        ? stylesheetToken : undefined;
        ArrayPush$1.call(content, stylesheet(useActualHostSelector, scopeToken));
      }
    }

    return content;
  }

  function getStylesheetsContent(vm, template) {
    const {
      stylesheets,
      stylesheetToken
    } = template;
    let content = [];

    if (!isUndefined$1(stylesheets) && stylesheets.length !== 0) {
      content = evaluateStylesheetsContent(stylesheets, stylesheetToken, vm);
    }

    return content;
  } // It might be worth caching this to avoid doing the lookup repeatedly, but
  // perf testing has not shown it to be a huge improvement yet:
  // https://github.com/salesforce/lwc/pull/2460#discussion_r691208892


  function getNearestNativeShadowComponent(vm) {
    let owner = vm;

    while (!isNull(owner)) {
      if (owner.renderMode === 1
      /* Shadow */
      && owner.shadowMode === 0
      /* Native */
      ) {
        return owner;
      }

      owner = owner.owner;
    }

    return owner;
  }

  function createStylesheet(vm, stylesheets) {
    const {
      renderer,
      renderMode,
      shadowMode
    } = vm;

    if (renderMode === 1
    /* Shadow */
    && shadowMode === 1
    /* Synthetic */
    ) {
      for (let i = 0; i < stylesheets.length; i++) {
        renderer.insertGlobalStylesheet(stylesheets[i]);
      }
    } else if (renderer.ssr) {
      // native shadow or light DOM, SSR
      const combinedStylesheetContent = ArrayJoin.call(stylesheets, '\n');
      return createInlineStyleVNode(combinedStylesheetContent);
    } else {
      // native shadow or light DOM, DOM renderer
      const root = getNearestNativeShadowComponent(vm);
      const isGlobal = isNull(root);

      for (let i = 0; i < stylesheets.length; i++) {
        if (isGlobal) {
          renderer.insertGlobalStylesheet(stylesheets[i]);
        } else {
          // local level
          renderer.insertStylesheet(stylesheets[i], root.cmpRoot);
        }
      }
    }

    return null;
  }
  /** Indicates if operations should be logged by the profiler. */

  let isProfilerEnabled = false;
  /** The currently assigned profiler dispatcher. */

  let currentDispatcher = noop;
  const profilerControl = {
    enableProfiler() {
      isProfilerEnabled = true;
    },

    disableProfiler() {
      isProfilerEnabled = false;
    },

    attachDispatcher(dispatcher) {
      currentDispatcher = dispatcher;
      this.enableProfiler();
    },

    detachDispatcher() {
      const dispatcher = currentDispatcher;
      currentDispatcher = noop;
      this.disableProfiler();
      return dispatcher;
    }

  };

  function logOperationStart(opId, vm) {

    if (isProfilerEnabled) {
      currentDispatcher(opId, 0
      /* Start */
      , vm.tagName, vm.idx);
    }
  }

  function logOperationEnd(opId, vm) {

    if (isProfilerEnabled) {
      currentDispatcher(opId, 1
      /* Stop */
      , vm.tagName, vm.idx);
    }
  }

  function logGlobalOperationStart(opId, vm) {

    if (isProfilerEnabled) {
      currentDispatcher(opId, 0
      /* Start */
      , vm === null || vm === void 0 ? void 0 : vm.tagName, vm === null || vm === void 0 ? void 0 : vm.idx);
    }
  }

  function logGlobalOperationEnd(opId, vm) {

    if (isProfilerEnabled) {
      currentDispatcher(opId, 1
      /* Stop */
      , vm === null || vm === void 0 ? void 0 : vm.tagName, vm === null || vm === void 0 ? void 0 : vm.idx);
    }
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  let isUpdatingTemplate = false;
  let vmBeingRendered = null;

  function getVMBeingRendered() {
    return vmBeingRendered;
  }

  function setVMBeingRendered(vm) {
    vmBeingRendered = vm;
  }

  function validateSlots(vm, html) {
    {
      // this method should never leak to prod
      throw new ReferenceError();
    }
  }

  function validateLightDomTemplate(template, vm) {
    if (template === defaultEmptyTemplate) return;

    if (vm.renderMode === 0
    /* Light */
    ) {
      assert.isTrue(template.renderMode === 'light', `Light DOM components can't render shadow DOM templates. Add an 'lwc:render-mode="light"' directive to the root template tag of ${getComponentTag(vm)}.`);
    } else {
      assert.isTrue(isUndefined$1(template.renderMode), `Shadow DOM components template can't render light DOM templates. Either remove the 'lwc:render-mode' directive from ${getComponentTag(vm)} or set it to 'lwc:render-mode="shadow"`);
    }
  }

  function evaluateTemplate(vm, html) {

    const isUpdatingTemplateInception = isUpdatingTemplate;
    const vmOfTemplateBeingUpdatedInception = vmBeingRendered;
    let vnodes = [];
    runWithBoundaryProtection(vm, vm.owner, () => {
      // pre
      vmBeingRendered = vm;
      logOperationStart(1
      /* Render */
      , vm);
    }, () => {
      // job
      const {
        component,
        context,
        cmpSlots,
        cmpTemplate,
        tro
      } = vm;
      tro.observe(() => {
        // Reset the cache memoizer for template when needed.
        if (html !== cmpTemplate) {
          if ("production" !== 'production') ; // Perf opt: do not reset the shadow root during the first rendering (there is
          // nothing to reset).


          if (!isNull(cmpTemplate)) {
            // It is important to reset the content to avoid reusing similar elements
            // generated from a different template, because they could have similar IDs,
            // and snabbdom just rely on the IDs.
            resetComponentRoot(vm);
          } // Check that the template was built by the compiler.


          if (!isTemplateRegistered(html)) {
            throw new TypeError(`Invalid template returned by the render() method on ${vm}. It must return an imported template (e.g.: \`import html from "./${vm.def.name}.html"\`), instead, it has returned: ${toString$1(html)}.`);
          }

          vm.cmpTemplate = html; // Create a brand new template cache for the swapped templated.

          context.tplCache = create(null); // Set the computeHasScopedStyles property in the context, to avoid recomputing it repeatedly.

          context.hasScopedStyles = computeHasScopedStyles(html); // Update the scoping token on the host element.

          updateStylesheetToken(vm, html); // Evaluate, create stylesheet and cache the produced VNode for future
          // re-rendering.

          const stylesheetsContent = getStylesheetsContent(vm, html);
          context.styleVNode = stylesheetsContent.length === 0 ? null : createStylesheet(vm, stylesheetsContent);
        }

        if ("production" !== 'production') ; // right before producing the vnodes, we clear up all internal references
        // to custom elements from the template.


        vm.velements = []; // Set the global flag that template is being updated

        isUpdatingTemplate = true;
        vnodes = html.call(undefined, api, component, cmpSlots, context.tplCache);
        const {
          styleVNode
        } = context;

        if (!isNull(styleVNode)) {
          ArrayUnshift.call(vnodes, styleVNode);
        }
      });
    }, () => {
      // post
      isUpdatingTemplate = isUpdatingTemplateInception;
      vmBeingRendered = vmOfTemplateBeingUpdatedInception;
      logOperationEnd(1
      /* Render */
      , vm);
    });

    return vnodes;
  }

  function computeHasScopedStyles(template) {
    const {
      stylesheets
    } = template;

    if (!isUndefined$1(stylesheets)) {
      for (let i = 0; i < stylesheets.length; i++) {
        if (isTrue(stylesheets[i][KEY__SCOPED_CSS])) {
          return true;
        }
      }
    }

    return false;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function addErrorComponentStack(vm, error) {
    if (!isFrozen(error) && isUndefined$1(error.wcStack)) {
      const wcStack = getErrorComponentStack(vm);
      defineProperty(error, 'wcStack', {
        get() {
          return wcStack;
        }

      });
    }
  }
  let vmBeingConstructed = null;

  function isBeingConstructed(vm) {
    return vmBeingConstructed === vm;
  }

  function invokeComponentCallback(vm, fn, args) {
    const {
      component,
      callHook,
      owner
    } = vm;
    runWithBoundaryProtection(vm, owner, noop, () => {
      callHook(component, fn, args);
    }, noop);
  }

  function invokeComponentConstructor(vm, Ctor) {
    const vmBeingConstructedInception = vmBeingConstructed;
    let error;
    logOperationStart(0
    /* Constructor */
    , vm);
    vmBeingConstructed = vm;
    /**
     * Constructors don't need to be wrapped with a boundary because for root elements
     * it should throw, while elements from template are already wrapped by a boundary
     * associated to the diffing algo.
     */

    try {
      // job
      const result = new Ctor(); // Check indirectly if the constructor result is an instance of LightningElement. Using
      // the "instanceof" operator would not work here since Locker Service provides its own
      // implementation of LightningElement, so we indirectly check if the base constructor is
      // invoked by accessing the component on the vm.

      if (vmBeingConstructed.component !== result) {
        throw new TypeError('Invalid component constructor, the class should extend LightningElement.');
      }
    } catch (e) {
      error = Object(e);
    } finally {
      logOperationEnd(0
      /* Constructor */
      , vm);
      vmBeingConstructed = vmBeingConstructedInception;

      if (!isUndefined$1(error)) {
        addErrorComponentStack(vm, error); // re-throwing the original error annotated after restoring the context

        throw error; // eslint-disable-line no-unsafe-finally
      }
    }
  }

  function invokeComponentRenderMethod(vm) {
    const {
      def: {
        render
      },
      callHook,
      component,
      owner
    } = vm;
    const vmBeingRenderedInception = getVMBeingRendered();
    let html;
    let renderInvocationSuccessful = false;
    runWithBoundaryProtection(vm, owner, () => {
      setVMBeingRendered(vm);
    }, () => {
      // job
      vm.tro.observe(() => {
        html = callHook(component, render);
        renderInvocationSuccessful = true;
      });
    }, () => {
      setVMBeingRendered(vmBeingRenderedInception);
    }); // If render() invocation failed, process errorCallback in boundary and return an empty template

    return renderInvocationSuccessful ? evaluateTemplate(vm, html) : [];
  }

  function invokeEventListener(vm, fn, thisValue, event) {
    const {
      callHook,
      owner
    } = vm;
    runWithBoundaryProtection(vm, owner, noop, () => {
      // job
      if ("production" !== 'production') ;

      callHook(thisValue, fn, [event]);
    }, noop);
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const signedTemplateMap = new Map();
  /**
   * INTERNAL: This function can only be invoked by compiled code. The compiler
   * will prevent this function from being imported by userland code.
   */

  function registerComponent(Ctor, {
    tmpl
  }) {
    signedTemplateMap.set(Ctor, tmpl); // chaining this method as a way to wrap existing assignment of component constructor easily,
    // without too much transformation

    return Ctor;
  }

  function getComponentRegisteredTemplate(Ctor) {
    return signedTemplateMap.get(Ctor);
  }

  function getTemplateReactiveObserver(vm) {
    return new ReactiveObserver(() => {
      const {
        isDirty
      } = vm;

      if (isFalse(isDirty)) {
        markComponentAsDirty(vm);
        scheduleRehydration(vm);
      }
    });
  }

  function renderComponent(vm) {

    vm.tro.reset();
    const vnodes = invokeComponentRenderMethod(vm);
    vm.isDirty = false;
    vm.isScheduled = false;
    return vnodes;
  }

  function markComponentAsDirty(vm) {

    vm.isDirty = true;
  }

  const cmpEventListenerMap = new WeakMap();

  function getWrappedComponentsListener(vm, listener) {
    if (!isFunction$1(listener)) {
      throw new TypeError(); // avoiding problems with non-valid listeners
    }

    let wrappedListener = cmpEventListenerMap.get(listener);

    if (isUndefined$1(wrappedListener)) {
      wrappedListener = function (event) {
        invokeEventListener(vm, listener, undefined, event);
      };

      cmpEventListenerMap.set(listener, wrappedListener);
    }

    return wrappedListener;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const Services = create(null);
  const hooks = ['rendered', 'connected', 'disconnected'];
  /**
   * EXPERIMENTAL: This function allows for the registration of "services"
   * in LWC by exposing hooks into the component life-cycle. This API is
   * subject to change or being removed.
   */

  function register(service) {

    for (let i = 0; i < hooks.length; ++i) {
      const hookName = hooks[i];

      if (hookName in service) {
        let l = Services[hookName];

        if (isUndefined$1(l)) {
          Services[hookName] = l = [];
        }

        ArrayPush$1.call(l, service[hookName]);
      }
    }
  }

  function invokeServiceHook(vm, cbs) {

    const {
      component,
      def,
      context
    } = vm;

    for (let i = 0, len = cbs.length; i < len; ++i) {
      cbs[i].call(undefined, component, {}, def, context);
    }
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  let idx = 0;
  /** The internal slot used to associate different objects the engine manipulates with the VM */

  const ViewModelReflection = new WeakMap();

  function callHook(cmp, fn, args = []) {
    return fn.apply(cmp, args);
  }

  function setHook(cmp, prop, newValue) {
    cmp[prop] = newValue;
  }

  function getHook(cmp, prop) {
    return cmp[prop];
  }

  function rerenderVM(vm) {
    rehydrate(vm);
  }

  function connectRootElement(elm) {
    const vm = getAssociatedVM(elm);
    logGlobalOperationStart(7
    /* GlobalHydrate */
    , vm); // Usually means moving the element from one place to another, which is observable via
    // life-cycle hooks.

    if (vm.state === 1
    /* connected */
    ) {
      disconnectRootElement(elm);
    }

    runConnectedCallback(vm);
    rehydrate(vm);
    logGlobalOperationEnd(7
    /* GlobalHydrate */
    , vm);
  }

  function disconnectRootElement(elm) {
    const vm = getAssociatedVM(elm);
    resetComponentStateWhenRemoved(vm);
  }

  function appendVM(vm) {
    rehydrate(vm);
  } // just in case the component comes back, with this we guarantee re-rendering it
  // while preventing any attempt to rehydration until after reinsertion.


  function resetComponentStateWhenRemoved(vm) {
    const {
      state
    } = vm;

    if (state !== 2
    /* disconnected */
    ) {
      const {
        oar,
        tro
      } = vm; // Making sure that any observing record will not trigger the rehydrated on this vm

      tro.reset(); // Making sure that any observing accessor record will not trigger the setter to be reinvoked

      for (const key in oar) {
        oar[key].reset();
      }

      runDisconnectedCallback(vm); // Spec: https://dom.spec.whatwg.org/#concept-node-remove (step 14-15)

      runChildNodesDisconnectedCallback(vm);
      runLightChildNodesDisconnectedCallback(vm);
    }
  } // this method is triggered by the diffing algo only when a vnode from the
  // old vnode.children is removed from the DOM.


  function removeVM(vm) {

    resetComponentStateWhenRemoved(vm);
  }

  function getNearestShadowAncestor(vm) {
    let ancestor = vm.owner;

    while (!isNull(ancestor) && ancestor.renderMode === 0
    /* Light */
    ) {
      ancestor = ancestor.owner;
    }

    return ancestor;
  }

  function createVM(elm, def, options) {
    const {
      mode,
      owner,
      renderer,
      tagName
    } = options;
    const vm = {
      elm,
      def,
      idx: idx++,
      state: 0
      /* created */
      ,
      isScheduled: false,
      isDirty: true,
      tagName,
      mode,
      owner,
      renderer,
      children: EmptyArray,
      aChildren: EmptyArray,
      velements: EmptyArray,
      cmpProps: create(null),
      cmpFields: create(null),
      cmpSlots: create(null),
      oar: create(null),
      cmpTemplate: null,
      renderMode: def.renderMode,
      shadowMode: null,
      context: {
        stylesheetToken: undefined,
        hasTokenInClass: undefined,
        hasTokenInAttribute: undefined,
        hasScopedStyles: undefined,
        styleVNode: null,
        tplCache: EmptyObject,
        wiredConnecting: EmptyArray,
        wiredDisconnecting: EmptyArray
      },
      tro: null,
      component: null,
      cmpRoot: null,
      callHook,
      setHook,
      getHook
    };
    vm.shadowMode = computeShadowMode(vm);
    vm.tro = getTemplateReactiveObserver(vm);


    invokeComponentConstructor(vm, def.ctor); // Initializing the wire decorator per instance only when really needed

    if (hasWireAdapters(vm)) {
      installWireAdapters(vm);
    }

    return vm;
  }

  function computeShadowMode(vm) {
    const {
      def,
      renderer
    } = vm;
    const {
      isNativeShadowDefined,
      isSyntheticShadowDefined
    } = renderer;
    let shadowMode;

    if (isSyntheticShadowDefined) {
      if (def.renderMode === 0
      /* Light */
      ) {
        // ShadowMode.Native implies "not synthetic shadow" which is consistent with how
        // everything defaults to native when the synthetic shadow polyfill is unavailable.
        shadowMode = 0
        /* Native */
        ;
      } else if (isNativeShadowDefined) {
        if (def.shadowSupportMode === "any"
        /* Any */
        ) {
          shadowMode = 0
          /* Native */
          ;
        } else {
          const shadowAncestor = getNearestShadowAncestor(vm);

          if (!isNull(shadowAncestor) && shadowAncestor.shadowMode === 0
          /* Native */
          ) {
            // Transitive support for native Shadow DOM. A component in native mode
            // transitively opts all of its descendants into native.
            shadowMode = 0
            /* Native */
            ;
          } else {
            // Synthetic if neither this component nor any of its ancestors are configured
            // to be native.
            shadowMode = 1
            /* Synthetic */
            ;
          }
        }
      } else {
        // Synthetic if there is no native Shadow DOM support.
        shadowMode = 1
        /* Synthetic */
        ;
      }
    } else {
      // Native if the synthetic shadow polyfill is unavailable.
      shadowMode = 0
      /* Native */
      ;
    }

    return shadowMode;
  }

  function associateVM(obj, vm) {
    ViewModelReflection.set(obj, vm);
  }

  function getAssociatedVM(obj) {
    const vm = ViewModelReflection.get(obj);

    return vm;
  }

  function getAssociatedVMIfPresent(obj) {
    const maybeVm = ViewModelReflection.get(obj);

    return maybeVm;
  }

  function rehydrate(vm) {
    if (isTrue(vm.isDirty)) {
      const children = renderComponent(vm);
      patchShadowRoot(vm, children);
    }
  }

  function patchShadowRoot(vm, newCh) {
    const {
      children: oldCh
    } = vm; // caching the new children collection

    vm.children = newCh;

    if (newCh.length > 0 || oldCh.length > 0) {
      // patch function mutates vnodes by adding the element reference,
      // however, if patching fails it contains partial changes.
      if (oldCh !== newCh) {
        const fn = hasDynamicChildren(newCh) ? updateDynamicChildren : updateStaticChildren;
        runWithBoundaryProtection(vm, vm, () => {
          // pre
          logOperationStart(2
          /* Patch */
          , vm);
        }, () => {
          // job
          const elementToRenderTo = getRenderRoot(vm);
          fn(elementToRenderTo, oldCh, newCh);
        }, () => {
          // post
          logOperationEnd(2
          /* Patch */
          , vm);
        });
      }
    }

    if (vm.state === 1
    /* connected */
    ) {
      // If the element is connected, that means connectedCallback was already issued, and
      // any successive rendering should finish with the call to renderedCallback, otherwise
      // the connectedCallback will take care of calling it in the right order at the end of
      // the current rehydration process.
      runRenderedCallback(vm);
    }
  }

  function runRenderedCallback(vm) {
    const {
      renderer,
      def: {
        renderedCallback
      }
    } = vm;

    if (isTrue(renderer.ssr)) {
      return;
    }

    const {
      rendered
    } = Services;

    if (rendered) {
      invokeServiceHook(vm, rendered);
    }

    if (!isUndefined$1(renderedCallback)) {
      logOperationStart(4
      /* RenderedCallback */
      , vm);
      invokeComponentCallback(vm, renderedCallback);
      logOperationEnd(4
      /* RenderedCallback */
      , vm);
    }
  }

  let rehydrateQueue = [];

  function flushRehydrationQueue() {
    logGlobalOperationStart(8
    /* GlobalRehydrate */
    );

    const vms = rehydrateQueue.sort((a, b) => a.idx - b.idx);
    rehydrateQueue = []; // reset to a new queue

    for (let i = 0, len = vms.length; i < len; i += 1) {
      const vm = vms[i];

      try {
        rehydrate(vm);
      } catch (error) {
        if (i + 1 < len) {
          // pieces of the queue are still pending to be rehydrated, those should have priority
          if (rehydrateQueue.length === 0) {
            addCallbackToNextTick(flushRehydrationQueue);
          }

          ArrayUnshift.apply(rehydrateQueue, ArraySlice.call(vms, i + 1));
        } // we need to end the measure before throwing.


        logGlobalOperationEnd(8
        /* GlobalRehydrate */
        ); // re-throwing the original error will break the current tick, but since the next tick is
        // already scheduled, it should continue patching the rest.

        throw error; // eslint-disable-line no-unsafe-finally
      }
    }

    logGlobalOperationEnd(8
    /* GlobalRehydrate */
    );
  }

  function runConnectedCallback(vm) {
    const {
      state
    } = vm;

    if (state === 1
    /* connected */
    ) {
      return; // nothing to do since it was already connected
    }

    vm.state = 1
    /* connected */
    ; // reporting connection

    const {
      connected
    } = Services;

    if (connected) {
      invokeServiceHook(vm, connected);
    }

    if (hasWireAdapters(vm)) {
      connectWireAdapters(vm);
    }

    const {
      connectedCallback
    } = vm.def;

    if (!isUndefined$1(connectedCallback)) {
      logOperationStart(3
      /* ConnectedCallback */
      , vm);
      invokeComponentCallback(vm, connectedCallback);
      logOperationEnd(3
      /* ConnectedCallback */
      , vm);
    }
  }

  function hasWireAdapters(vm) {
    return getOwnPropertyNames$1(vm.def.wire).length > 0;
  }

  function runDisconnectedCallback(vm) {

    if (isFalse(vm.isDirty)) {
      // this guarantees that if the component is reused/reinserted,
      // it will be re-rendered because we are disconnecting the reactivity
      // linking, so mutations are not automatically reflected on the state
      // of disconnected components.
      vm.isDirty = true;
    }

    vm.state = 2
    /* disconnected */
    ; // reporting disconnection

    const {
      disconnected
    } = Services;

    if (disconnected) {
      invokeServiceHook(vm, disconnected);
    }

    if (hasWireAdapters(vm)) {
      disconnectWireAdapters(vm);
    }

    const {
      disconnectedCallback
    } = vm.def;

    if (!isUndefined$1(disconnectedCallback)) {
      logOperationStart(5
      /* DisconnectedCallback */
      , vm);
      invokeComponentCallback(vm, disconnectedCallback);
      logOperationEnd(5
      /* DisconnectedCallback */
      , vm);
    }
  }

  function runChildNodesDisconnectedCallback(vm) {
    const {
      velements: vCustomElementCollection
    } = vm; // Reporting disconnection for every child in inverse order since they are
    // inserted in reserved order.

    for (let i = vCustomElementCollection.length - 1; i >= 0; i -= 1) {
      const {
        elm
      } = vCustomElementCollection[i]; // There are two cases where the element could be undefined:
      // * when there is an error during the construction phase, and an error
      //   boundary picks it, there is a possibility that the VCustomElement
      //   is not properly initialized, and therefore is should be ignored.
      // * when slotted custom element is not used by the element where it is
      //   slotted into it, as  a result, the custom element was never
      //   initialized.

      if (!isUndefined$1(elm)) {
        const childVM = getAssociatedVMIfPresent(elm); // The VM associated with the element might be associated undefined
        // in the case where the VM failed in the middle of its creation,
        // eg: constructor throwing before invoking super().

        if (!isUndefined$1(childVM)) {
          resetComponentStateWhenRemoved(childVM);
        }
      }
    }
  }

  function runLightChildNodesDisconnectedCallback(vm) {
    const {
      aChildren: adoptedChildren
    } = vm;
    recursivelyDisconnectChildren(adoptedChildren);
  }
  /**
   * The recursion doesn't need to be a complete traversal of the vnode graph,
   * instead it can be partial, when a custom element vnode is found, we don't
   * need to continue into its children because by attempting to disconnect the
   * custom element itself will trigger the removal of anything slotted or anything
   * defined on its shadow.
   */


  function recursivelyDisconnectChildren(vnodes) {
    for (let i = 0, len = vnodes.length; i < len; i += 1) {
      const vnode = vnodes[i];

      if (!isNull(vnode) && isArray$1(vnode.children) && !isUndefined$1(vnode.elm)) {
        // vnode is a VElement with children
        if (isUndefined$1(vnode.ctor)) {
          // it is a VElement, just keep looking (recursively)
          recursivelyDisconnectChildren(vnode.children);
        } else {
          // it is a VCustomElement, disconnect it and ignore its children
          resetComponentStateWhenRemoved(getAssociatedVM(vnode.elm));
        }
      }
    }
  } // This is a super optimized mechanism to remove the content of the root node (shadow root
  // for shadow DOM components and the root element itself for light DOM) without having to go
  // into snabbdom. Especially useful when the reset is a consequence of an error, in which case the
  // children VNodes might not be representing the current state of the DOM.


  function resetComponentRoot(vm) {
    const {
      children,
      renderer
    } = vm;
    const rootNode = getRenderRoot(vm);

    for (let i = 0, len = children.length; i < len; i++) {
      const child = children[i];

      if (!isNull(child) && !isUndefined$1(child.elm)) {
        renderer.remove(child.elm, rootNode);
      }
    }

    vm.children = EmptyArray;
    runChildNodesDisconnectedCallback(vm);
    vm.velements = EmptyArray;
  }

  function scheduleRehydration(vm) {
    if (isTrue(vm.renderer.ssr) || isTrue(vm.isScheduled)) {
      return;
    }

    vm.isScheduled = true;

    if (rehydrateQueue.length === 0) {
      addCallbackToNextTick(flushRehydrationQueue);
    }

    ArrayPush$1.call(rehydrateQueue, vm);
  }

  function getErrorBoundaryVM(vm) {
    let currentVm = vm;

    while (!isNull(currentVm)) {
      if (!isUndefined$1(currentVm.def.errorCallback)) {
        return currentVm;
      }

      currentVm = currentVm.owner;
    }
  } // slow path routine
  // NOTE: we should probably more this routine to the synthetic shadow folder
  // and get the allocation to be cached by in the elm instead of in the VM


  function allocateInSlot(vm, children) {
    const {
      cmpSlots: oldSlots
    } = vm;
    const cmpSlots = vm.cmpSlots = create(null);

    for (let i = 0, len = children.length; i < len; i += 1) {
      const vnode = children[i];

      if (isNull(vnode)) {
        continue;
      }

      const {
        data
      } = vnode;
      const slotName = data.attrs && data.attrs.slot || '';
      const vnodes = cmpSlots[slotName] = cmpSlots[slotName] || []; // re-keying the vnodes is necessary to avoid conflicts with default content for the slot
      // which might have similar keys. Each vnode will always have a key that
      // starts with a numeric character from compiler. In this case, we add a unique
      // notation for slotted vnodes keys, e.g.: `@foo:1:1`

      if (!isUndefined$1(vnode.key)) {
        vnode.key = `@${slotName}:${vnode.key}`;
      }

      ArrayPush$1.call(vnodes, vnode);
    }

    if (isFalse(vm.isDirty)) {
      // We need to determine if the old allocation is really different from the new one
      // and mark the vm as dirty
      const oldKeys = keys(oldSlots);

      if (oldKeys.length !== keys(cmpSlots).length) {
        markComponentAsDirty(vm);
        return;
      }

      for (let i = 0, len = oldKeys.length; i < len; i += 1) {
        const key = oldKeys[i];

        if (isUndefined$1(cmpSlots[key]) || oldSlots[key].length !== cmpSlots[key].length) {
          markComponentAsDirty(vm);
          return;
        }

        const oldVNodes = oldSlots[key];
        const vnodes = cmpSlots[key];

        for (let j = 0, a = cmpSlots[key].length; j < a; j += 1) {
          if (oldVNodes[j] !== vnodes[j]) {
            markComponentAsDirty(vm);
            return;
          }
        }
      }
    }
  }

  function runWithBoundaryProtection(vm, owner, pre, job, post) {
    let error;
    pre();

    try {
      job();
    } catch (e) {
      error = Object(e);
    } finally {
      post();

      if (!isUndefined$1(error)) {
        addErrorComponentStack(vm, error);
        const errorBoundaryVm = isNull(owner) ? undefined : getErrorBoundaryVM(owner);

        if (isUndefined$1(errorBoundaryVm)) {
          throw error; // eslint-disable-line no-unsafe-finally
        }

        resetComponentRoot(vm); // remove offenders

        logOperationStart(6
        /* ErrorCallback */
        , vm); // error boundaries must have an ErrorCallback

        const errorCallback = errorBoundaryVm.def.errorCallback;
        invokeComponentCallback(errorBoundaryVm, errorCallback, [error, error.wcStack]);
        logOperationEnd(6
        /* ErrorCallback */
        , vm);
      }
    }
  }

  function getRenderRoot(vm) {
    return vm.renderMode === 1
    /* Shadow */
    ? vm.cmpRoot : vm.elm;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const DeprecatedWiredElementHost = '$$DeprecatedWiredElementHostKey$$';
  const DeprecatedWiredParamsMeta = '$$DeprecatedWiredParamsMetaKey$$';
  const WireMetaMap = new Map();

  class WireContextRegistrationEvent extends CustomEvent {
    constructor(adapterToken, {
      setNewContext,
      setDisconnectedCallback
    }) {
      super(adapterToken, {
        bubbles: true,
        composed: true
      });
      defineProperties(this, {
        setNewContext: {
          value: setNewContext
        },
        setDisconnectedCallback: {
          value: setDisconnectedCallback
        }
      });
    }

  }

  function createFieldDataCallback(vm, name) {
    const {
      cmpFields
    } = vm;
    return value => {
      if (value !== vm.cmpFields[name]) {
        // storing the value in the underlying storage
        cmpFields[name] = value;
        componentValueMutated(vm, name);
      }
    };
  }

  function createMethodDataCallback(vm, method) {
    return value => {
      // dispatching new value into the wired method
      runWithBoundaryProtection(vm, vm.owner, noop, () => {
        // job
        method.call(vm.component, value);
      }, noop);
    };
  }

  function createConfigWatcher(component, configCallback, callbackWhenConfigIsReady) {
    let hasPendingConfig = false; // creating the reactive observer for reactive params when needed

    const ro = new ReactiveObserver(() => {
      if (hasPendingConfig === false) {
        hasPendingConfig = true; // collect new config in the micro-task

        Promise.resolve().then(() => {
          hasPendingConfig = false; // resetting current reactive params

          ro.reset(); // dispatching a new config due to a change in the configuration

          computeConfigAndUpdate();
        });
      }
    });

    const computeConfigAndUpdate = () => {
      let config;
      ro.observe(() => config = configCallback(component)); // eslint-disable-next-line lwc-internal/no-invalid-todo
      // TODO: dev-mode validation of config based on the adapter.configSchema
      // @ts-ignore it is assigned in the observe() callback

      callbackWhenConfigIsReady(config);
    };

    return {
      computeConfigAndUpdate,
      ro
    };
  }

  function createContextWatcher(vm, wireDef, callbackWhenContextIsReady) {
    const {
      adapter
    } = wireDef;
    const adapterContextToken = getAdapterToken(adapter);

    if (isUndefined$1(adapterContextToken)) {
      return; // no provider found, nothing to be done
    }

    const {
      elm,
      renderer,
      context: {
        wiredConnecting,
        wiredDisconnecting
      }
    } = vm; // waiting for the component to be connected to formally request the context via the token

    ArrayPush$1.call(wiredConnecting, () => {
      // This event is responsible for connecting the host element with another
      // element in the composed path that is providing contextual data. The provider
      // must be listening for a special dom event with the name corresponding to the value of
      // `adapterContextToken`, which will remain secret and internal to this file only to
      // guarantee that the linkage can be forged.
      const contextRegistrationEvent = new WireContextRegistrationEvent(adapterContextToken, {
        setNewContext(newContext) {
          // eslint-disable-next-line lwc-internal/no-invalid-todo
          // TODO: dev-mode validation of config based on the adapter.contextSchema
          callbackWhenContextIsReady(newContext);
        },

        setDisconnectedCallback(disconnectCallback) {
          // adds this callback into the disconnect bucket so it gets disconnected from parent
          // the the element hosting the wire is disconnected
          ArrayPush$1.call(wiredDisconnecting, disconnectCallback);
        }

      });
      renderer.dispatchEvent(elm, contextRegistrationEvent);
    });
  }

  function createConnector(vm, name, wireDef) {
    const {
      method,
      adapter,
      configCallback,
      dynamic
    } = wireDef;
    const dataCallback = isUndefined$1(method) ? createFieldDataCallback(vm, name) : createMethodDataCallback(vm, method);
    let context;
    let connector; // Workaround to pass the component element associated to this wire adapter instance.

    defineProperty(dataCallback, DeprecatedWiredElementHost, {
      value: vm.elm
    });
    defineProperty(dataCallback, DeprecatedWiredParamsMeta, {
      value: dynamic
    });
    runWithBoundaryProtection(vm, vm, noop, () => {
      // job
      connector = new adapter(dataCallback);
    }, noop);

    const updateConnectorConfig = config => {
      // every time the config is recomputed due to tracking,
      // this callback will be invoked with the new computed config
      runWithBoundaryProtection(vm, vm, noop, () => {
        // job
        connector.update(config, context);
      }, noop);
    }; // Computes the current wire config and calls the update method on the wire adapter.
    // If it has params, we will need to observe changes in the next tick.


    const {
      computeConfigAndUpdate,
      ro
    } = createConfigWatcher(vm.component, configCallback, updateConnectorConfig); // if the adapter needs contextualization, we need to watch for new context and push it alongside the config

    if (!isUndefined$1(adapter.contextSchema)) {
      createContextWatcher(vm, wireDef, newContext => {
        // every time the context is pushed into this component,
        // this callback will be invoked with the new computed context
        if (context !== newContext) {
          context = newContext; // Note: when new context arrives, the config will be recomputed and pushed along side the new
          // context, this is to preserve the identity characteristics, config should not have identity
          // (ever), while context can have identity

          if (vm.state === 1
          /* connected */
          ) {
            computeConfigAndUpdate();
          }
        }
      });
    }

    return {
      // @ts-ignore the boundary protection executes sync, connector is always defined
      connector,
      computeConfigAndUpdate,
      resetConfigWatcher: () => ro.reset()
    };
  }

  const AdapterToTokenMap = new Map();

  function getAdapterToken(adapter) {
    return AdapterToTokenMap.get(adapter);
  }

  function setAdapterToken(adapter, token) {
    AdapterToTokenMap.set(adapter, token);
  }

  function storeWiredMethodMeta(descriptor, adapter, configCallback, dynamic) {
    // support for callable adapters
    if (adapter.adapter) {
      adapter = adapter.adapter;
    }

    const method = descriptor.value;
    const def = {
      adapter,
      method,
      configCallback,
      dynamic
    };
    WireMetaMap.set(descriptor, def);
  }

  function storeWiredFieldMeta(descriptor, adapter, configCallback, dynamic) {
    // support for callable adapters
    if (adapter.adapter) {
      adapter = adapter.adapter;
    }

    const def = {
      adapter,
      configCallback,
      dynamic
    };
    WireMetaMap.set(descriptor, def);
  }

  function installWireAdapters(vm) {
    const {
      context,
      def: {
        wire
      }
    } = vm;
    const wiredConnecting = context.wiredConnecting = [];
    const wiredDisconnecting = context.wiredDisconnecting = [];

    for (const fieldNameOrMethod in wire) {
      const descriptor = wire[fieldNameOrMethod];
      const wireDef = WireMetaMap.get(descriptor);

      if (!isUndefined$1(wireDef)) {
        const {
          connector,
          computeConfigAndUpdate,
          resetConfigWatcher
        } = createConnector(vm, fieldNameOrMethod, wireDef);
        const hasDynamicParams = wireDef.dynamic.length > 0;
        ArrayPush$1.call(wiredConnecting, () => {
          connector.connect();

          if (!runtimeFlags.ENABLE_WIRE_SYNC_EMIT) {
            if (hasDynamicParams) {
              Promise.resolve().then(computeConfigAndUpdate);
              return;
            }
          }

          computeConfigAndUpdate();
        });
        ArrayPush$1.call(wiredDisconnecting, () => {
          connector.disconnect();
          resetConfigWatcher();
        });
      }
    }
  }

  function connectWireAdapters(vm) {
    const {
      wiredConnecting
    } = vm.context;

    for (let i = 0, len = wiredConnecting.length; i < len; i += 1) {
      wiredConnecting[i]();
    }
  }

  function disconnectWireAdapters(vm) {
    const {
      wiredDisconnecting
    } = vm.context;
    runWithBoundaryProtection(vm, vm, noop, () => {
      // job
      for (let i = 0, len = wiredDisconnecting.length; i < len; i += 1) {
        wiredDisconnecting[i]();
      }
    }, noop);
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  function createContextProvider(adapter) {
    let adapterContextToken = getAdapterToken(adapter);

    if (!isUndefined$1(adapterContextToken)) {
      throw new Error(`Adapter already has a context provider.`);
    }

    adapterContextToken = guid();
    setAdapterToken(adapter, adapterContextToken);
    const providers = new WeakSet();
    return (elm, options) => {
      if (providers.has(elm)) {
        throw new Error(`Adapter was already installed on ${elm}.`);
      }

      providers.add(elm);
      const {
        consumerConnectedCallback,
        consumerDisconnectedCallback
      } = options;
      elm.addEventListener(adapterContextToken, evt => {
        const {
          setNewContext,
          setDisconnectedCallback
        } = evt;
        const consumer = {
          provide(newContext) {
            setNewContext(newContext);
          }

        };

        const disconnectCallback = () => {
          if (!isUndefined$1(consumerDisconnectedCallback)) {
            consumerDisconnectedCallback(consumer);
          }
        };

        setDisconnectedCallback(disconnectCallback);
        consumerConnectedCallback(consumer);
        evt.stopImmediatePropagation();
      });
    };
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
   * EXPERIMENTAL: This function allows you to create a reactive readonly
   * membrane around any object value. This API is subject to change or
   * being removed.
   */


  function readonly(obj) {

    return reactiveMembrane.getReadOnlyProxy(obj);
  }
  /* version: 2.5.4 */

  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const globalStylesheets = create(null);

  const globalStylesheetsParentElement = document.head || document.body || document;
  const supportsConstructableStyleSheets = isFunction$1(CSSStyleSheet.prototype.replaceSync);
  const styleElements = create(null);
  const styleSheets = create(null);
  const nodesToStyleSheets = new WeakMap();
  let getCustomElement, defineCustomElement, HTMLElementConstructor;

  function isCustomElementRegistryAvailable() {
    if (typeof customElements === 'undefined') {
      return false;
    }

    try {
      // dereference HTMLElement global because babel wraps globals in compat mode with a
      // _wrapNativeSuper()
      // This is a problem because LWCUpgradableElement extends renderer.HTMLElement which does not
      // get wrapped by babel.
      const HTMLElementAlias = HTMLElement; // In case we use compat mode with a modern browser, the compat mode transformation
      // invokes the DOM api with an .apply() or .call() to initialize any DOM api sub-classing,
      // which are not equipped to be initialized that way.

      class clazz extends HTMLElementAlias {}

      customElements.define('lwc-test-' + Math.floor(Math.random() * 1000000), clazz);
      new clazz();
      return true;
    } catch (_a) {
      return false;
    }
  }

  function insertConstructableStyleSheet(content, target) {
    // It's important for CSSStyleSheets to be unique based on their content, so that
    // `shadowRoot.adoptedStyleSheets.includes(sheet)` works.
    let styleSheet = styleSheets[content];

    if (isUndefined$1(styleSheet)) {
      styleSheet = new CSSStyleSheet();
      styleSheet.replaceSync(content);
      styleSheets[content] = styleSheet;
    }

    if (!target.adoptedStyleSheets.includes(styleSheet)) {
      target.adoptedStyleSheets = [...target.adoptedStyleSheets, styleSheet];
    }
  }

  function insertStyleElement(content, target) {
    // Avoid inserting duplicate `<style>`s
    let sheets = nodesToStyleSheets.get(target);

    if (isUndefined$1(sheets)) {
      sheets = create(null);
      nodesToStyleSheets.set(target, sheets);
    }

    if (sheets[content]) {
      return;
    }

    sheets[content] = true; // This `<style>` may be repeated multiple times in the DOM, so cache it. It's a bit
    // faster to call `cloneNode()` on an existing node than to recreate it every time.

    let elm = styleElements[content];

    if (isUndefined$1(elm)) {
      elm = document.createElement('style');
      elm.type = 'text/css';
      elm.textContent = content;
      styleElements[content] = elm;
    } else {
      elm = elm.cloneNode(true);
    }

    target.appendChild(elm);
  }

  if (isCustomElementRegistryAvailable()) {
    getCustomElement = customElements.get.bind(customElements);
    defineCustomElement = customElements.define.bind(customElements);
    HTMLElementConstructor = HTMLElement;
  } else {
    const registry = create(null);
    const reverseRegistry = new WeakMap();

    defineCustomElement = function define(name, ctor) {
      if (name !== StringToLowerCase.call(name) || registry[name]) {
        throw new TypeError(`Invalid Registration`);
      }

      registry[name] = ctor;
      reverseRegistry.set(ctor, name);
    };

    getCustomElement = function get(name) {
      return registry[name];
    };

    HTMLElementConstructor = function HTMLElement() {
      if (!(this instanceof HTMLElement)) {
        throw new TypeError(`Invalid Invocation`);
      }

      const {
        constructor
      } = this;
      const name = reverseRegistry.get(constructor);

      if (!name) {
        throw new TypeError(`Invalid Construction`);
      }

      const elm = document.createElement(name);
      setPrototypeOf(elm, constructor.prototype);
      return elm;
    };

    HTMLElementConstructor.prototype = HTMLElement.prototype;
  }

  const renderer = {
    ssr: false,
    isNativeShadowDefined: _globalThis[KEY__IS_NATIVE_SHADOW_ROOT_DEFINED],
    isSyntheticShadowDefined: hasOwnProperty$1.call(Element.prototype, KEY__SHADOW_TOKEN),

    createElement(tagName, namespace) {
      return isUndefined$1(namespace) ? document.createElement(tagName) : document.createElementNS(namespace, tagName);
    },

    createText(content) {
      return document.createTextNode(content);
    },

    createComment(content) {
      return document.createComment(content);
    },

    insert(node, parent, anchor) {
      parent.insertBefore(node, anchor);
    },

    remove(node, parent) {
      parent.removeChild(node);
    },

    nextSibling(node) {
      return node.nextSibling;
    },

    attachShadow(element, options) {
      return element.attachShadow(options);
    },

    setText(node, content) {
      node.nodeValue = content;
    },

    getProperty(node, key) {
      return node[key];
    },

    setProperty(node, key, value) {

      node[key] = value;
    },

    getAttribute(element, name, namespace) {
      return isUndefined$1(namespace) ? element.getAttribute(name) : element.getAttributeNS(namespace, name);
    },

    setAttribute(element, name, value, namespace) {
      return isUndefined$1(namespace) ? element.setAttribute(name, value) : element.setAttributeNS(namespace, name, value);
    },

    removeAttribute(element, name, namespace) {
      if (isUndefined$1(namespace)) {
        element.removeAttribute(name);
      } else {
        element.removeAttributeNS(namespace, name);
      }
    },

    addEventListener(target, type, callback, options) {
      target.addEventListener(type, callback, options);
    },

    removeEventListener(target, type, callback, options) {
      target.removeEventListener(type, callback, options);
    },

    dispatchEvent(target, event) {
      return target.dispatchEvent(event);
    },

    getClassList(element) {
      return element.classList;
    },

    setCSSStyleProperty(element, name, value, important) {
      // TODO [#0]: How to avoid this type casting? Shall we use a different type interface to
      // represent elements in the engine?
      element.style.setProperty(name, value, important ? 'important' : '');
    },

    getBoundingClientRect(element) {
      return element.getBoundingClientRect();
    },

    querySelector(element, selectors) {
      return element.querySelector(selectors);
    },

    querySelectorAll(element, selectors) {
      return element.querySelectorAll(selectors);
    },

    getElementsByTagName(element, tagNameOrWildCard) {
      return element.getElementsByTagName(tagNameOrWildCard);
    },

    getElementsByClassName(element, names) {
      return element.getElementsByClassName(names);
    },

    getChildren(element) {
      return element.children;
    },

    getChildNodes(element) {
      return element.childNodes;
    },

    getFirstChild(element) {
      return element.firstChild;
    },

    getFirstElementChild(element) {
      return element.firstElementChild;
    },

    getLastChild(element) {
      return element.lastChild;
    },

    getLastElementChild(element) {
      return element.lastElementChild;
    },

    isConnected(node) {
      return node.isConnected;
    },

    insertGlobalStylesheet(content) {
      if (!isUndefined$1(globalStylesheets[content])) {
        return;
      }

      globalStylesheets[content] = true;
      const elm = document.createElement('style');
      elm.type = 'text/css';
      elm.textContent = content;
      globalStylesheetsParentElement.appendChild(elm);
    },

    insertStylesheet(content, target) {
      if (supportsConstructableStyleSheets) {
        insertConstructableStyleSheet(content, target);
      } else {
        // Fall back to <style> element
        insertStyleElement(content, target);
      }
    },

    assertInstanceOfHTMLElement(elm, msg) {
      assert.invariant(elm instanceof HTMLElement, msg);
    },

    defineCustomElement,
    getCustomElement,
    HTMLElement: HTMLElementConstructor
  };
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
   * This function builds a Web Component class from a LWC constructor so it can be
   * registered as a new element via customElements.define() at any given time.
   *
   * @deprecated since version 1.3.11
   *
   * @example
   * ```
   * import { buildCustomElementConstructor } from 'lwc';
   * import Foo from 'ns/foo';
   * const WC = buildCustomElementConstructor(Foo);
   * customElements.define('x-foo', WC);
   * const elm = document.createElement('x-foo');
   * ```
   */

  function deprecatedBuildCustomElementConstructor(Ctor) {

    return Ctor.CustomElementConstructor;
  }

  function buildCustomElementConstructor(Ctor) {
    const def = getComponentInternalDef(Ctor);
    return class extends def.bridge {
      constructor() {
        super();
        createVM(this, def, {
          mode: 'open',
          owner: null,
          tagName: this.tagName,
          renderer
        });
      }

      connectedCallback() {
        connectRootElement(this);
      }

      disconnectedCallback() {
        disconnectRootElement(this);
      }

    };
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  // TODO [#2472]: Remove this workaround when appropriate.
  // eslint-disable-next-line lwc-internal/no-global-node


  const _Node$1 = Node;
  const ConnectingSlot = new WeakMap();
  const DisconnectingSlot = new WeakMap();

  function callNodeSlot(node, slot) {

    const fn = slot.get(node);

    if (!isUndefined$1(fn)) {
      fn(node);
    }

    return node; // for convenience
  } // Monkey patching Node methods to be able to detect the insertions and removal of root elements
  // created via createElement.


  const {
    appendChild,
    insertBefore,
    removeChild,
    replaceChild
  } = _Node$1.prototype;
  assign(_Node$1.prototype, {
    appendChild(newChild) {
      const appendedNode = appendChild.call(this, newChild);
      return callNodeSlot(appendedNode, ConnectingSlot);
    },

    insertBefore(newChild, referenceNode) {
      const insertedNode = insertBefore.call(this, newChild, referenceNode);
      return callNodeSlot(insertedNode, ConnectingSlot);
    },

    removeChild(oldChild) {
      const removedNode = removeChild.call(this, oldChild);
      return callNodeSlot(removedNode, DisconnectingSlot);
    },

    replaceChild(newChild, oldChild) {
      const replacedNode = replaceChild.call(this, newChild, oldChild);
      callNodeSlot(replacedNode, DisconnectingSlot);
      callNodeSlot(newChild, ConnectingSlot);
      return replacedNode;
    }

  });
  /**
   * EXPERIMENTAL: This function is almost identical to document.createElement with the slightly
   * difference that in the options, you can pass the `is` property set to a Constructor instead of
   * just a string value. The intent is to allow the creation of an element controlled by LWC without
   * having to register the element as a custom element.
   *
   * @example
   * ```
   * const el = createElement('x-foo', { is: FooCtor });
   * ```
   */

  function createElement(sel, options) {
    if (!isObject(options) || isNull(options)) {
      throw new TypeError(`"createElement" function expects an object as second parameter but received "${toString$1(options)}".`);
    }

    const Ctor = options.is;

    if (!isFunction$1(Ctor)) {
      throw new TypeError(`"createElement" function expects an "is" option with a valid component constructor.`);
    }

    const UpgradableConstructor = getUpgradableConstructor(sel, renderer);
    let wasComponentUpgraded = false; // the custom element from the registry is expecting an upgrade callback

    /**
     * Note: if the upgradable constructor does not expect, or throw when we new it
     * with a callback as the first argument, we could implement a more advanced
     * mechanism that only passes that argument if the constructor is known to be
     * an upgradable custom element.
     */

    const element = new UpgradableConstructor(elm => {
      const def = getComponentInternalDef(Ctor);
      createVM(elm, def, {
        tagName: sel,
        mode: options.mode !== 'closed' ? 'open' : 'closed',
        owner: null,
        renderer
      });
      ConnectingSlot.set(elm, connectRootElement);
      DisconnectingSlot.set(elm, disconnectRootElement);
      wasComponentUpgraded = true;
    });

    if (!wasComponentUpgraded) {
      /* eslint-disable-next-line no-console */
      console.error(`Unexpected tag name "${sel}". This name is a registered custom element, preventing LWC to upgrade the element.`);
    }

    return element;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */

  /**
   * EXPERIMENTAL: This function provides access to the component constructor, given an HTMLElement.
   * This API is subject to change or being removed.
   */


  function getComponentConstructor(elm) {
    let ctor = null;

    if (elm instanceof HTMLElement) {
      const vm = getAssociatedVMIfPresent(elm);

      if (!isUndefined$1(vm)) {
        ctor = vm.def.ctor;
      }
    }

    return ctor;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */
  // TODO [#2472]: Remove this workaround when appropriate.
  // eslint-disable-next-line lwc-internal/no-global-node


  const _Node = Node;
  /**
   * EXPERIMENTAL: This function detects whether or not a Node is controlled by a LWC template. This
   * API is subject to change or being removed.
   */

  function isNodeFromTemplate(node) {
    if (isFalse(node instanceof _Node)) {
      return false;
    } // TODO [#1250]: skipping the shadowRoot instances itself makes no sense, we need to revisit
    // this with locker


    if (node instanceof ShadowRoot) {
      return false;
    }

    if (renderer.isSyntheticShadowDefined) {
      // TODO [#1252]: old behavior that is still used by some pieces of the platform,
      // specifically, nodes inserted manually on places where `lwc:dom="manual"` directive is not
      // used, will be considered global elements.
      return !isUndefined$1(node[KEY__SHADOW_RESOLVER]);
    }

    const root = node.getRootNode();
    return root instanceof ShadowRoot;
  }
  /*
   * Copyright (c) 2018, salesforce.com, inc.
   * All rights reserved.
   * SPDX-License-Identifier: MIT
   * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
   */


  const ComponentConstructorToCustomElementConstructorMap = new Map();

  function getCustomElementConstructor(Ctor) {
    if (Ctor === LightningElement) {
      throw new TypeError(`Invalid Constructor. LightningElement base class can't be claimed as a custom element.`);
    }

    let ce = ComponentConstructorToCustomElementConstructorMap.get(Ctor);

    if (isUndefined$1(ce)) {
      ce = buildCustomElementConstructor(Ctor);
      ComponentConstructorToCustomElementConstructorMap.set(Ctor, ce);
    }

    return ce;
  }
  /**
   * This static getter builds a Web Component class from a LWC constructor so it can be registered
   * as a new element via customElements.define() at any given time. E.g.:
   *
   *      import Foo from 'ns/foo';
   *      customElements.define('x-foo', Foo.CustomElementConstructor);
   *      const elm = document.createElement('x-foo');
   *
   */


  defineProperty(LightningElement, 'CustomElementConstructor', {
    get() {
      return getCustomElementConstructor(this);
    }

  });
  freeze(LightningElement);
  seal(LightningElement.prototype);
  /* version: 2.5.4 */

  exports.LightningElement = LightningElement;
  exports.__unstable__ProfilerControl = profilerControl;
  exports.api = api$1;
  exports.buildCustomElementConstructor = deprecatedBuildCustomElementConstructor;
  exports.createContextProvider = createContextProvider;
  exports.createElement = createElement;
  exports.getComponentConstructor = getComponentConstructor;
  exports.getComponentDef = getComponentDef;
  exports.isComponentConstructor = isComponentConstructor;
  exports.isNodeFromTemplate = isNodeFromTemplate;
  exports.readonly = readonly;
  exports.register = register;
  exports.registerComponent = registerComponent;
  exports.registerDecorators = registerDecorators;
  exports.registerTemplate = registerTemplate;
  exports.sanitizeAttribute = sanitizeAttribute;
  exports.setFeatureFlag = setFeatureFlag;
  exports.setFeatureFlagForTest = setFeatureFlagForTest;
  exports.swapComponent = swapComponent;
  exports.swapStyle = swapStyle;
  exports.swapTemplate = swapTemplate;
  exports.track = track;
  exports.unwrap = unwrap;
  exports.wire = wire;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});

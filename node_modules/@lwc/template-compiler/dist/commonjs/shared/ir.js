"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isComponentProp = exports.isIRBooleanAttribute = exports.isIRStringAttribute = exports.isIRExpressionAttribute = exports.isSlot = exports.isTemplate = exports.isCustomElement = exports.isCommentNode = exports.isTextNode = exports.isElement = exports.createComment = exports.createText = exports.createElement = void 0;
const parse5Utils = __importStar(require("./parse5"));
const types_1 = require("./types");
function createElement(original) {
    let location = original.sourceCodeLocation;
    // With parse5 automatically recovering from invalid HTML, some AST nodes might not have
    // location information. For example when a <table> element has a <tr> child element, parse5
    // creates a <tbody> element in the middle without location information. In this case, we
    // can safely skip the closing tag validation.
    //
    // TODO [#248]: Report a warning when location is not available indicating the original HTML
    // template is not valid.
    let current = original;
    while (!location && parse5Utils.isElementNode(original.parentNode)) {
        current = original.parentNode;
        location = current.sourceCodeLocation;
    }
    if (!location) {
        throw new Error('Invalid element AST node. Missing source code location.');
    }
    return {
        type: 'element',
        tag: original.tagName,
        namespace: original.namespaceURI,
        children: [],
        location,
        __original: original,
    };
}
exports.createElement = createElement;
function createText(original, value) {
    if (!original.sourceCodeLocation) {
        throw new Error('Invalid text AST node. Missing source code location.');
    }
    return {
        type: 'text',
        value,
        location: original.sourceCodeLocation,
    };
}
exports.createText = createText;
function createComment(original, value) {
    if (!original.sourceCodeLocation) {
        throw new Error('Invalid comment AST node. Missing source code location.');
    }
    return {
        type: 'comment',
        value,
        location: original.sourceCodeLocation,
    };
}
exports.createComment = createComment;
function isElement(node) {
    return node.type === 'element';
}
exports.isElement = isElement;
function isTextNode(node) {
    return node.type === 'text';
}
exports.isTextNode = isTextNode;
function isCommentNode(node) {
    return node.type === 'comment';
}
exports.isCommentNode = isCommentNode;
function isCustomElement(node) {
    return isElement(node) && node.component !== undefined;
}
exports.isCustomElement = isCustomElement;
function isTemplate(element) {
    return element.tag === 'template';
}
exports.isTemplate = isTemplate;
function isSlot(element) {
    return element.tag === 'slot';
}
exports.isSlot = isSlot;
function isIRExpressionAttribute(attribute) {
    return attribute.type === types_1.IRAttributeType.Expression;
}
exports.isIRExpressionAttribute = isIRExpressionAttribute;
function isIRStringAttribute(attribute) {
    return attribute.type === types_1.IRAttributeType.String;
}
exports.isIRStringAttribute = isIRStringAttribute;
function isIRBooleanAttribute(attribute) {
    return attribute.type === types_1.IRAttributeType.Boolean;
}
exports.isIRBooleanAttribute = isIRBooleanAttribute;
function isComponentProp(identifier, root, parentStack) {
    var _a;
    const { name } = identifier;
    let current = root;
    // Walking up the AST and checking for each node to find if the identifer name is identical to
    // an iteration variable.
    for (let i = parentStack.length; i >= 0; i--) {
        if (isElement(current)) {
            const { forEach, forOf } = current;
            if ((forEach === null || forEach === void 0 ? void 0 : forEach.item.name) === name ||
                ((_a = forEach === null || forEach === void 0 ? void 0 : forEach.index) === null || _a === void 0 ? void 0 : _a.name) === name ||
                (forOf === null || forOf === void 0 ? void 0 : forOf.iterator.name) === name) {
                return false;
            }
        }
        current = parentStack[i - 1];
    }
    // The identifier is bound to a component property if no match is found after reaching to AST
    // root.
    return true;
}
exports.isComponentProp = isComponentProp;
//# sourceMappingURL=ir.js.map
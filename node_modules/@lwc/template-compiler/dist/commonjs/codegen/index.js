"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const astring = __importStar(require("astring"));
const shared_1 = require("@lwc/shared");
const errors_1 = require("@lwc/errors");
const ir_1 = require("../shared/ir");
const constants_1 = require("../shared/constants");
const types_1 = require("../shared/types");
const codegen_1 = __importDefault(require("./codegen"));
const scope_1 = require("./scope");
const helpers_1 = require("./helpers");
const module_1 = require("./formatters/module");
const function_1 = require("./formatters/function");
const t = __importStar(require("../shared/estree"));
const attribute_1 = require("../parser/attribute");
const constants_2 = require("../parser/constants");
function transform(codeGen) {
    const parentStack = [];
    function transformElement(element) {
        const databag = elementDataBag(element);
        let res;
        const children = transformChildren(element);
        // Check wether it has the special directive lwc:dynamic
        if (element.lwc && element.lwc.dynamic) {
            const expression = (0, scope_1.bindExpression)(element.lwc.dynamic, element, parentStack);
            res = codeGen.genDynamicElement(element.tag, expression, databag, children);
        }
        else if ((0, ir_1.isCustomElement)(element)) {
            // Make sure to register the component
            const componentClassName = element.component;
            res = codeGen.genCustomElement(element.tag, (0, helpers_1.identifierFromComponentName)(componentClassName), databag, children);
        }
        else if ((0, ir_1.isSlot)(element)) {
            const defaultSlot = children;
            res = codeGen.getSlot(element.slotName, databag, defaultSlot);
        }
        else {
            res = codeGen.genElement(element.tag, databag, children);
        }
        res = applyInlineIf(element, res);
        res = applyInlineFor(element, res);
        return res;
    }
    function transformTemplate(element) {
        const children = transformChildren(element);
        let res = applyTemplateIf(element, children);
        if (element.forEach) {
            res = applyTemplateFor(element, res);
        }
        else if (element.forOf) {
            res = applyTemplateForOf(element, res);
        }
        if (t.isArrayExpression(res) && element.if) {
            // The `if` transformation does not use the SpreadElement, neither null, therefore we can safely
            // typecast it to t.Expression[]
            return res.elements;
        }
        else {
            return res;
        }
    }
    function transformText(consecutiveText) {
        return codeGen.genText(consecutiveText.map((text) => {
            const { value } = text;
            return typeof value === 'string' ? value : (0, scope_1.bindExpression)(value, text, parentStack);
        }));
    }
    function transformComment(comment) {
        return codeGen.genComment(comment.value);
    }
    function transformChildren(parent) {
        const res = [];
        const children = parent.children;
        const childrenIterator = children[Symbol.iterator]();
        let current;
        parentStack.push(parent);
        while ((current = childrenIterator.next()) && !current.done) {
            let child = current.value;
            if ((0, ir_1.isTextNode)(child)) {
                const continuousText = [];
                // Consume all the contiguous text nodes.
                do {
                    continuousText.push(child);
                    current = childrenIterator.next();
                    child = current.value;
                } while (!current.done && (0, ir_1.isTextNode)(child));
                res.push(transformText(continuousText));
                // Early exit if a text node is the last child node.
                if (current.done) {
                    break;
                }
            }
            if ((0, ir_1.isElement)(child)) {
                if ((0, ir_1.isTemplate)(child)) {
                    const templateChildren = transformTemplate(child);
                    Array.isArray(templateChildren)
                        ? res.push(...templateChildren)
                        : res.push(templateChildren);
                }
                else {
                    res.push(transformElement(child));
                }
            }
            if ((0, ir_1.isCommentNode)(child) && codeGen.preserveComments) {
                res.push(transformComment(child));
            }
        }
        parentStack.pop();
        if ((0, helpers_1.shouldFlatten)(children, codeGen)) {
            if (children.length === 1 && !(0, helpers_1.containsDynamicChildren)(children)) {
                return res[0];
            }
            else {
                return codeGen.genFlatten([t.arrayExpression(res)]);
            }
        }
        else {
            return t.arrayExpression(res);
        }
    }
    function applyInlineIf(element, node, testExpression, falseValue) {
        if (!element.if) {
            return node;
        }
        if (!testExpression) {
            testExpression = (0, scope_1.bindExpression)(element.if, element, parentStack);
        }
        let leftExpression;
        const modifier = element.ifModifier;
        if (modifier === 'true') {
            leftExpression = testExpression;
        }
        else if (modifier === 'false') {
            leftExpression = t.unaryExpression('!', testExpression);
        }
        else if (modifier === 'strict-true') {
            leftExpression = t.binaryExpression('===', testExpression, t.literal(true));
        }
        else {
            throw (0, errors_1.generateCompilerError)(errors_1.TemplateErrors.UNKNOWN_IF_MODIFIER, {
                messageArgs: [modifier],
            });
        }
        return t.conditionalExpression(leftExpression, node, falseValue !== null && falseValue !== void 0 ? falseValue : t.literal(null));
    }
    function applyInlineFor(element, node) {
        if (!element.forEach) {
            return node;
        }
        const { expression, item, index } = element.forEach;
        const params = [item];
        if (index) {
            params.push(index);
        }
        const iterable = (0, scope_1.bindExpression)(expression, element, parentStack);
        const iterationFunction = t.functionExpression(null, params, t.blockStatement([t.returnStatement(node)]));
        return codeGen.genIterator(iterable, iterationFunction);
    }
    function applyInlineForOf(element, node) {
        if (!element.forOf) {
            return node;
        }
        const { expression, iterator } = element.forOf;
        const { name: iteratorName } = iterator;
        const argsMapping = {
            value: `${iteratorName}Value`,
            index: `${iteratorName}Index`,
            first: `${iteratorName}First`,
            last: `${iteratorName}Last`,
        };
        const iteratorArgs = Object.values(argsMapping).map((arg) => t.identifier(arg));
        const iteratorObjet = t.objectExpression(Object.entries(argsMapping).map(([prop, arg]) => t.property(t.identifier(prop), t.identifier(arg))));
        const iterable = (0, scope_1.bindExpression)(expression, element, parentStack);
        const iterationFunction = t.functionExpression(null, iteratorArgs, t.blockStatement([
            t.variableDeclaration('const', [
                t.variableDeclarator(t.identifier(iteratorName), iteratorObjet),
            ]),
            t.returnStatement(node),
        ]));
        return codeGen.genIterator(iterable, iterationFunction);
    }
    function applyTemplateForOf(element, fragmentNodes) {
        let expression = fragmentNodes;
        if (t.isArrayExpression(expression) && expression.elements.length === 1) {
            expression = expression.elements[0];
        }
        return applyInlineForOf(element, expression);
    }
    function applyTemplateFor(element, fragmentNodes) {
        let expression = fragmentNodes;
        if (t.isArrayExpression(expression) && expression.elements.length === 1) {
            expression = expression.elements[0];
        }
        return applyInlineFor(element, expression);
    }
    function applyTemplateIf(element, fragmentNodes) {
        if (!element.if) {
            return fragmentNodes;
        }
        if (t.isArrayExpression(fragmentNodes)) {
            // Bind the expression once for all the template children
            const testExpression = (0, scope_1.bindExpression)(element.if, element, parentStack);
            return t.arrayExpression(fragmentNodes.elements.map((child) => child !== null
                ? applyInlineIf(element, child, testExpression)
                : null));
        }
        else {
            // If the template has a single children, make sure the ternary expression returns an array
            return applyInlineIf(element, fragmentNodes, undefined, t.arrayExpression([]));
        }
    }
    function computeAttrValue(attr, element) {
        const { tag, namespace } = element;
        const isUsedAsAttribute = (0, attribute_1.isAttribute)(element, attr.name);
        switch (attr.type) {
            case types_1.IRAttributeType.Expression: {
                const expression = (0, scope_1.bindExpression)(attr.value, element, parentStack);
                // TODO [#2012]: Normalize global boolean attrs values passed to custom elements as props
                if (isUsedAsAttribute && (0, shared_1.isBooleanAttribute)(attr.name, tag)) {
                    // We need to do some manipulation to allow the diffing algorithm add/remove the attribute
                    // without handling special cases at runtime.
                    return codeGen.genBooleanAttributeExpr(expression);
                }
                if (attr.name === 'tabindex') {
                    return codeGen.genTabIndex([expression]);
                }
                if (attr.name === 'id' || (0, attribute_1.isIdReferencingAttribute)(attr.name)) {
                    return codeGen.genScopedId(expression);
                }
                if (codeGen.scopeFragmentId &&
                    (0, attribute_1.isAllowedFragOnlyUrlsXHTML)(tag, attr.name, namespace)) {
                    return codeGen.genScopedFragId(expression);
                }
                if ((0, attribute_1.isSvgUseHref)(tag, attr.name, namespace)) {
                    codeGen.usedLwcApis.add('sanitizeAttribute');
                    return t.callExpression(t.identifier('sanitizeAttribute'), [
                        t.literal(tag),
                        t.literal(namespace),
                        t.literal(attr.name),
                        codeGen.genScopedFragId(expression),
                    ]);
                }
                return expression;
            }
            case types_1.IRAttributeType.String: {
                if (attr.name === 'id') {
                    return codeGen.genScopedId(attr.value);
                }
                if (attr.name === 'spellcheck') {
                    return t.literal(attr.value.toLowerCase() !== 'false');
                }
                if (!isUsedAsAttribute && (0, shared_1.isBooleanAttribute)(attr.name, tag)) {
                    // We are in presence of a string value, for a recognized boolean attribute, which is used as
                    // property. for these cases, always set the property to true.
                    return t.literal(true);
                }
                if ((0, attribute_1.isIdReferencingAttribute)(attr.name)) {
                    return codeGen.genScopedId(attr.value);
                }
                if (codeGen.scopeFragmentId &&
                    (0, attribute_1.isAllowedFragOnlyUrlsXHTML)(tag, attr.name, namespace) &&
                    (0, attribute_1.isFragmentOnlyUrl)(attr.value)) {
                    return codeGen.genScopedFragId(attr.value);
                }
                if ((0, attribute_1.isSvgUseHref)(tag, attr.name, namespace)) {
                    codeGen.usedLwcApis.add('sanitizeAttribute');
                    return t.callExpression(t.identifier('sanitizeAttribute'), [
                        t.literal(tag),
                        t.literal(namespace),
                        t.literal(attr.name),
                        (0, attribute_1.isFragmentOnlyUrl)(attr.value)
                            ? codeGen.genScopedFragId(attr.value)
                            : t.literal(attr.value),
                    ]);
                }
                return t.literal(attr.value);
            }
            case types_1.IRAttributeType.Boolean: {
                // A boolean value used in an attribute should always generate .setAttribute(attr.name, ''),
                // regardless if is a boolean attribute or not.
                return isUsedAsAttribute ? t.literal('') : t.literal(attr.value);
            }
        }
    }
    function elementDataBag(element) {
        const data = [];
        const { attrs, props, on, forKey, lwc } = element;
        // Attributes
        if (attrs) {
            const rest = {};
            for (const [name, value] of Object.entries(attrs)) {
                if (name === 'class') {
                    // Handle class attribute:
                    // - expression values are turned into a `className` property.
                    // - string values are parsed and turned into a `classMap` object associating
                    //   each individual class name with a `true` boolean.
                    if (value.type === types_1.IRAttributeType.Expression) {
                        const classExpression = (0, scope_1.bindExpression)(value.value, element, parentStack);
                        data.push(t.property(t.identifier('className'), classExpression));
                    }
                    else if (value.type === types_1.IRAttributeType.String) {
                        const classNames = (0, helpers_1.parseClassNames)(value.value);
                        const classMap = t.objectExpression(classNames.map((name) => t.property(t.literal(name), t.literal(true))));
                        data.push(t.property(t.identifier('classMap'), classMap));
                    }
                }
                else if (name === 'style') {
                    // Handle style attribute:
                    // - expression values are turned into a `style` property.
                    // - string values are parsed and turned into a `styles` array
                    // containing triples of [name, value, important (optional)]
                    if (value.type === types_1.IRAttributeType.Expression) {
                        const styleExpression = (0, scope_1.bindExpression)(value.value, element, parentStack);
                        data.push(t.property(t.identifier('style'), styleExpression));
                    }
                    else if (value.type === types_1.IRAttributeType.String) {
                        const styleMap = (0, helpers_1.parseStyleText)(value.value);
                        const styleAST = (0, helpers_1.styleMapToStyleDeclsAST)(styleMap);
                        data.push(t.property(t.identifier('styleDecls'), styleAST));
                    }
                }
                else {
                    rest[name] = computeAttrValue(attrs[name], element);
                }
            }
            // Add all the remaining attributes to an `attrs` object where the key is the attribute
            // name and the value is the computed attribute value.
            if (Object.keys(rest).length) {
                const attrsObj = (0, helpers_1.objectToAST)(rest, (key) => rest[key]);
                data.push(t.property(t.identifier('attrs'), attrsObj));
            }
        }
        // Properties
        if (props) {
            const propsObj = (0, helpers_1.objectToAST)(props, (key) => computeAttrValue(props[key], element));
            data.push(t.property(t.identifier('props'), propsObj));
        }
        // Context
        if (lwc === null || lwc === void 0 ? void 0 : lwc.dom) {
            const contextObj = t.objectExpression([
                t.property(t.identifier('lwc'), t.objectExpression([t.property(t.identifier('dom'), t.literal(lwc.dom))])),
            ]);
            data.push(t.property(t.identifier('context'), contextObj));
        }
        // Key property on VNode
        if (forKey) {
            // If element has user-supplied `key` or is in iterator, call `api.k`
            const forKeyExpression = (0, scope_1.bindExpression)(forKey, element, parentStack);
            const generatedKey = codeGen.genKey(t.literal(codeGen.generateKey()), forKeyExpression);
            data.push(t.property(t.identifier('key'), generatedKey));
        }
        else {
            // If stand alone element with no user-defined key
            // member expression id
            data.push(t.property(t.identifier('key'), t.literal(codeGen.generateKey())));
        }
        // Event handler
        if (on) {
            const onObj = (0, helpers_1.objectToAST)(on, (key) => {
                const componentHandler = (0, scope_1.bindExpression)(on[key], element, parentStack);
                const handler = codeGen.genBind(componentHandler);
                return (0, helpers_1.memorizeHandler)(codeGen, element, parentStack, componentHandler, handler);
            });
            data.push(t.property(t.identifier('on'), onObj));
        }
        // SVG handling
        if (element.namespace === constants_2.SVG_NAMESPACE_URI) {
            data.push(t.property(t.identifier('svg'), t.literal(true)));
        }
        return t.objectExpression(data);
    }
    return transformChildren(codeGen.root);
}
function generateTemplateFunction(codeGen) {
    const returnedValue = transform(codeGen);
    const args = [
        constants_1.TEMPLATE_PARAMS.API,
        constants_1.TEMPLATE_PARAMS.INSTANCE,
        constants_1.TEMPLATE_PARAMS.SLOT_SET,
        constants_1.TEMPLATE_PARAMS.CONTEXT,
    ].map((id) => t.identifier(id));
    const body = [
        t.variableDeclaration('const', [
            t.variableDeclarator(t.objectPattern(Object.keys(codeGen.usedApis).map((name) => t.assignmentProperty(t.identifier(name), codeGen.usedApis[name]))), t.identifier(constants_1.TEMPLATE_PARAMS.API)),
        ]),
    ];
    if (Object.keys(codeGen.usedSlots).length) {
        body.push(t.variableDeclaration('const', [
            t.variableDeclarator(t.objectPattern(Object.keys(codeGen.usedApis).map((name) => t.assignmentProperty(t.literal(name), codeGen.usedSlots[name], {
                computed: true,
            }))), t.identifier(constants_1.TEMPLATE_PARAMS.SLOT_SET)),
        ]));
    }
    if (codeGen.memorizedIds.length) {
        body.push(t.variableDeclaration('const', [
            t.variableDeclarator(t.objectPattern(codeGen.memorizedIds.map((id) => t.assignmentProperty(id, id, { shorthand: true }))), t.identifier(constants_1.TEMPLATE_PARAMS.CONTEXT)),
        ]));
    }
    body.push(t.returnStatement(returnedValue));
    return t.functionDeclaration(t.identifier(constants_1.TEMPLATE_FUNCTION_NAME), args, t.blockStatement(body));
}
function default_1(root, config) {
    const scopeFragmentId = (0, helpers_1.hasIdAttribute)(root);
    const codeGen = new codegen_1.default({
        root,
        config,
        scopeFragmentId,
    });
    const templateFunction = generateTemplateFunction(codeGen);
    let program;
    switch (config.format) {
        case 'function':
            program = (0, function_1.format)(templateFunction, codeGen);
            break;
        case 'module':
            program = (0, module_1.format)(templateFunction, codeGen);
            break;
    }
    return astring.generate(program);
}
exports.default = default_1;
//# sourceMappingURL=index.js.map